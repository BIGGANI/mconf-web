- show_authors = true if show_authors.nil?

#my-webconference-recordings-list
  - if recordings.count <= 0
    = t('.no_recordings')

  - else
    - recordings.each do |recording|
      - metaUser = recording.metadata.all.select{ |m| m.name == BigbluebuttonRails.metadata_user_id.to_s }.first
      - metaTitle = recording.metadata.all.select{ |m| m.name == configatron.webconf.metadata.title }.first
      - metaDesc = recording.metadata.all.select{ |m| m.name == configatron.webconf.metadata.description }.first

      .thread.thread-no-hover.thread-no-logo{:class => cycle('thread-even' , 'thread-odd')}

        .thread-title.recording-field
          .thread-updated-at
            = t('.created')
            = t('updated_time_ago', :time => time_ago_in_words(recording.updated_at))
          - if metaTitle.nil? or metaTitle.content.blank?
            %span.recording-title= t('.no_title') + ':'
          - else
            %span.recording-title= metaTitle.content + ':'
          - if metaDesc.nil? or metaDesc.content.blank?
            %span.recording-description= t('.no_description')
          - else
            %span.recording-description= metaDesc.content

        .thread-content

          .recording-details
            .recording-date
              = icon_date
              = t('.started_at') + ": #{recording.start_time};"
            .recording-duration{:title => "#{t('.ended_at')}: #{recording.end_time}"}
              = t('.duration') + ':'
              - unless recording.start_time.nil? || recording.end_time.nil?
                = distance_of_time_in_words(recording.start_time, recording.end_time)

          .recording-details
            - if show_authors
              - unless metaUser.nil?
                - user = User.find_by_id(metaUser.content)
                - unless user.nil?
                  .recording-author
                    = icon_user
                    = t('.created_by') + ':'
                    = link_to user.full_name, user_profile_path(user)

          .recording-details
            = icon_playback
            = t('.playback') + ':'
            - unless recording.available
              %span.playback-unavailable= t('.unavailable')
              = icon_help(t('.unavailable_tip'))
            - else
              - if recording.playback_formats.size > 0
                - recording.playback_formats.each do |playback|
                  = link_to playback.format_type, playback.url, :class => 'playback-link'
              - else
                %span.playback-processing= t('.processing_dots')
                = icon_help(t('.processing_tip'))
