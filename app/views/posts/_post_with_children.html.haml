.thread.thread-with-children
  .thread-content.thread-content-full{:id => "parent-#{@post.id}"}
    %ul.thread-action-links
      - if can?(:create, @space.posts.build)
        %li= link_to t('reply').downcase, reply_post_space_post_path(@space, @post), { :name => @post.id, :title => t('comment.add'), :class => "open-modal" }
      - if can?(:update, @post)
        %li= link_to t('edit').downcase, edit_space_post_path(@post.space, @post), { :name => @post.id, :title => t('edit'), :class => "open-modal" }
      - if can?(:destroy, @post)
        %li= link_to t('remove').downcase, space_post_path(@space, @post), {:method => :delete, :title => t('delete.one'), :confirm => t('delete.confirm', :element => @post.title) }
      - if user_signed_in? and !@post.spam
        %li= link_to t('spam.default').downcase, spam_report_space_post_path(@space, @post), { :name => @post.id, :title => t('spam.report'), :class => "spam-report" }
    .thread-title
      %h2
        = image_tag("icons/comments.png", :class => "icon")
        = spam_icon() if @post.spam
        %span= @post.title
    .thread-text
      = render :partial => "posts/parent_post" , :locals => { :post =>  @post, :selected_post => false}
      - for comment in @posts
        - thread_class = cycle("thread-odd" , "thread-even")
        = render :partial => "post" , :locals => { :post =>  comment, :selected_post => false, :thread_class => thread_class}
