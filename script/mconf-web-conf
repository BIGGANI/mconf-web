#!/bin/bash
#
# Mconf-Web configuration script.
#
# This file is part of Mconf - http://code.google.com/p/mconf
# This file was based on "bbb-conf" from BigBlueButton (http://www.bigbluebutton.org)
#
# Author(s):
#       Leonardo Crauss Daronco <leonardodaronco@gmail.com>
#
# Changelog:
#   2011-07-05 LCD  Inital Version


#
# Environment variables
#

MCONF_WEB_VERSION="0.2"

IP=$(ifconfig | grep -v '127.0.0.1' | grep -E "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | head -1 | cut -d: -f2 | awk '{print $1}')

RVM_VERSION=1.5.2
RVM_RUBY_VERSION=1.9.2
RVM_GEMSET=mconf

CHECKOUT_REPO=git://github.com/mconf/mconf-web.git
CHECKOUT_SRC_DIR=~/dev/source/mconf-web
CHECKOUT_BRANCH=master


#
# Usage and first check for parameters
#

usage() {
    echo "Mconf-Web Configuration Utility - Version $MCONF_WEB_VERSION"
    echo "http://code.google.com/p/mconf"
    echo
    echo "   mconf-web-conf [options]"
    echo
    echo "Setup and configuration:"
    echo "   --install-ruby                   Install ruby (using RVM)"
    echo "Development:"
    echo "   --checkout <repo>                Checkout from github or <repo> (default: $CHECKOUT_REPO)"

#    echo "Administration:"
#    echo "   --restart                        Restart the web server"
#    echo "   --stop                           Stop the web server"
#    echo "   --start                          Start the web server"
#    if [ "$(is_vm)" ]; then
#        echo "Development:"
#        echo "   --setup-samba                    Setup samba share for development (VM only)"
#        echo "   --checkout  <repo>               Checkout from github or passed in repository"
#        echo "   --setup-dev [client|web|apps]    Setup development environment "
#        echo "   --reset-dev                      Reset environment back to using packages"
#    fi
    echo
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi


#
# Figure out our environment
#

# Check the current platform
# We only support Ubuntu for now
# About linux distros: http://linuxmafia.com/faq/Admin/release-files.html
PLATFORM=""
if [ -f /etc/lsb-release ]; then
    if grep -q Ubuntu /etc/lsb-release; then
        PLATFORM=ubuntu
    fi
fi

if [ $PLATFORM != ubuntu ]; then
    echo "* Error: This script cannot be run in your platform"
    echo `ls /etc/*-release | xargs grep DISTRIB_ID`
    exit 1
fi


#
# Helper functions
#

check_root() {
    if [ $EUID == 0 ]; then
        echo "This operation should not be run as root."
        echo
        echo "If this operation needs to execute an operation as root, you'll be asked for"
        echo "your password to execute the operation using sudo."
        exit 1
    fi
}

# need_root() {
#     if [ $EUID != 0 ]; then
#         echo "Need to be root to run this option"
#         exit 1
#     fi
# }

# Install a package in the system
# $1 is the package and binary name
install_dependency() {
    which $1
    if [ $? != 0 ]; then
        echo "** Installing dependency: $1"
        sudo apt-get install $1 -y --force-yes
    else
        echo "** Dependency '$1' already installed"
    fi
}

# Install a list of packages in the system
# $1 is the list of packages
install_dependencies() {
    echo "** Installing dependencies: $1"
    sudo apt-get install $1 -y --force-yes
}

# Prints a nice "banner" in the console with the text in
# $1 in the center
print_banner() {
    echo "-----------------------------"
    echo "$1"
    echo "-----------------------------"
}

# Prints a nice error "banner" in the console with the text in
# $1 in the center
print_error_banner() {
    echo "*****************************"
    echo "ERROR: $1"
    echo "*****************************"
}




#
# Parse the parameters
#

while [ $# -gt 0 ]; do

    if [ "$1" = "--install-ruby" -o "$1" = "-install-ruby" ]; then
        echo "* Request to install RVM/Ruby"
        RUBY=1
        shift
        continue
    fi

    if [ "$1" = "--checkout" -o "$1" = "-checkout" ]; then
        echo "* Request to checkout Mconf-Web"
        CHECKOUT=1
        shift
        if [ $# -ge 1 ]; then
            CHECKOUT_REPO="${1}"
            shift
        fi
        echo "** Checkout from: $CHECKOUT_REPO"
        continue
    fi


#    if [ "$1" = "-stop" -o "$1" = "--stop" ]; then
#        stop_bigbluebutton
#        exit 0
#    fi

    # all other parameters requires at least 1 argument

#    if [ "$1" = "-setip" -o "$1" = "--setip" ]; then
#        HOST="${2}"
#        if [ -z "$HOST" ]; then
#            echo "HOST IP=$IP"
#        fi
#
#        if echo $HOST|grep -q ":"; then
#            HOST=`echo ${2}|cut -d: -f1`
#            PORT=`echo ${2}|cut -d: -f2`
#        fi
#        shift; shift
#        continue
#    fi

    usage
    exit 1
done


#
# Version
# TODO

if [ $VERSION ]; then
    echo
#    dpkg -l | grep bbb
    exit 0
fi



#
# Install Ruby
#

# Check if rvm is installed
# Returns true or false in $RVM_INSTALLED
rvm_check() {
    RVMTYPE=`type rvm | head -1`
    if [ "$RVM_TYPE" != "rvm is a function" ]; then
        RVM_INSTALLED=true
    else
        RVM_INSTALLED=false
    fi
}

# Installs the base of RVM
# TODO: install RVM as root?
rvm_install() {
    install_dependencies "curl git"
    curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer ; chmod +x rvm-installer ; ./rvm-installer --version $RVM_VERSION
    touch ~/.bash_profile
    if ! cat ~/.bash_profile | grep -q ".rvm/scripts/rvm"; then
      echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile
    fi
    source "$HOME/.rvm/scripts/rvm"
    # bash < <(curl -s https://rvm.beginrescueend.com/install/rvm) # to install the latest version only
}

# Install system packages suggested by "rvm notes"
# Uses the section "For Ruby (MRI & ree)  you should install the following OS dependencies"
rvm_notes_install_packages() {
    RVM_PACKAGES=`rvm notes | grep "^\s*ruby:.*aptitude install" | head -1 | sed 's/.*aptitude install //g'`
    install_dependencies "$RVM_PACKAGES"
}

# Installs ruby using rvm and creates the default gemset
rvm_ruby_and_gemset() {
    if ! rvm list | grep -q $RVM_RUBY_VERSION; then
        rvm install $RVM_RUBY_VERSION
    fi
    rvm use $RVM_RUBY_VERSION
    rvm gemset clear
    rvm gemset create $RVM_GEMSET
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET # TODO: --default
}


if [ $RUBY ]; then
    check_root

    # installs RVM if not present (https://rvm.beginrescueend.com/rvm/install/)
    rvm_check
    if [ $RVM_INSTALLED ]; then
        echo "** RVM already installed at $(which rvm)"
    else
        echo "** Installing RVM..."
        rvm_install
    fi

    rvm_check
    if [ $RVM_INSTALLED ]; then
        rvm_notes_install_packages
        rvm_ruby_and_gemset
        print_banner "RVM/Ruby installed successfully."
    else
        print_error_banner "Something went wrong installing ruby. You'll have to do it manually."
    fi
fi



#
# Setup the development environemnt.
#

# Check if the destination dir exists and if it has a copy of mconf-web already there
# Sets $CHECKOUT_UPDATE if the above is true
# Exists if the dir exists and has something else than mconf-web
checkout_check_update() {
    if [ -d $CHECKOUT_SRC_DIR ]; then
        # checks a signature file to see if it's mconf-web at the destination dir or not
        cd  $CHECKOUT_SRC_DIR
        CHECKOUT_UPDATE=""
        if [ -f ./config/version.rb ]; then
            if cat ./config/version.rb | grep -q "module Vcc"; then
                CHECKOUT_UPDATE=true
            fi
        fi
        if [ ! $CHECKOUT_UPDATE ]; then
            print_error_banner "$CHECKOUT_SRC_DIR already exists. Please delete it to be able to checkout Mconf-Web."
            exit 1
        fi
    fi
}

if [ $CHECKOUT ]; then
    check_root

    install_dependency "git"
    checkout_check_update

    echo "** Creating the src directory: $CHECKOUT_SRC_DIR"
    mkdir -p $CHECKOUT_SRC_DIR

    if [ $CHECKOUT_UPDATE ]; then
        cd $CHECKOUT_SRC_DIR

        echo "** Checking out branch $CHECKOUT_BRANCH"
        git checkout $CHECKOUT_BRANCH

        echo "** Pulling $CHECKOUT_BRANCH from origin."
        git pull origin $CHECKOUT_BRANCH
    else
        echo "** Cloning Mconf-Web."
        cd  $CHECKOUT_SRC_DIR/../
        git clone $CHECKOUT_REPO $CHECKOUT_SRC_DIR

        cd $CHECKOUT_SRC_DIR
        echo "** Checking out branch $CHECKOUT_BRANCH"
        git checkout $CHECKOUT_BRANCH
    fi

    print_banner "Checked out Mconf-Web"
fi
