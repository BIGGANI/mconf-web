#!/bin/bash
#
# Mconf-Web configuration script.
#
# This file is part of Mconf - http://code.google.com/p/mconf
# This file was based on "bbb-conf" from BigBlueButton (http://www.bigbluebutton.org)
#
# Author(s):
#       Leonardo Crauss Daronco <leonardodaronco@gmail.com>
#
# Changelog:
#   2011-07-05 LCD  Inital Version


#
# Environment variables
#

MCONF_WEB_VERSION="0.2"

IP=$(ifconfig | grep -v '127.0.0.1' | grep -E "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | head -1 | cut -d: -f2 | awk '{print $1}')

RVM_VERSION=1.6.21
RVM_RUBY_VERSION=1.9.2
RVM_GEMSET=mconf

CHECKOUT_REPO=git://github.com/mconf/mconf-web.git
CHECKOUT_SRC_DIR=~/dev/source/mconf-web
CHECKOUT_BRANCH=script_conf


#
# Usage and first check for parameters
#

usage() {
    echo "Mconf-Web Configuration Utility - Version $MCONF_WEB_VERSION"
    echo "http://code.google.com/p/mconf"
    echo
    echo "   mconf-web-conf [commands] [options]"
    echo
    echo "Commands:"
    echo
    echo "  General:"
    echo "    --help, -h                       Shows this help"
    echo "    --version, -v                    Display version"
    echo "  Setup and configuration:"
    echo "    --install-ruby                   Install ruby (using RVM)"
    echo "    --install-packages [ENV]         Install dependencies to run Mconf-Web (default: installs for both envs)"
    echo "                                     ENV can be \"dev\" or \"prod\" (without quotes)"
    echo "  Development:"
    echo "    --checkout [REPO]                Checkout the repository from the default repo or from REPO"
    echo "                                     REPO can be any git url (default: $CHECKOUT_REPO)"
    echo "    --setup-dev                      Setup the development environment"
    echo "  Production:"
    echo "    --setup-prod                     Setup the production environment (you need to --setup-dev before)"
    echo
    echo "Options:"
    echo
    echo "   --source, -s                      Set the directory to checkout the source code (or where the code already is)"
#    echo "Administration:"
#    echo "   --restart                        Restart the web server"
#    echo "   --stop                           Stop the web server"
#    echo "   --start                          Start the web server"
    echo
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi



#
# Helper functions
#

check_root() {
    if [ $EUID == 0 ]; then
        echo "This operation should not be run as root."
        echo
        echo "If this operation needs to execute an operation as root, you'll be asked for"
        echo "your password to execute the operation using sudo."
        exit 1
    fi
}

# need_root() {
#     if [ $EUID != 0 ]; then
#         echo "Need to be root to run this option"
#         exit 1
#     fi
# }

# Install a package in the system
# $1 is the package and binary name
install_dependency() {
    which $1
    if [ $? != 0 ]; then
        echo "-- Installing dependency: $1"
        sudo apt-get install $1 -y --force-yes
    else
        echo "-- Dependency '$1' already installed"
    fi
}

# Install a list of packages in the system
# $1 is the list of packages
install_dependencies() {
    echo "-- Installing dependencies: $1"
    sudo apt-get install $1 -y --force-yes
}

# Prints a nice "banner" in the console with the text in
# $1 in the center
print_banner() {
    echo
    echo "-- $1"
    echo
}

# Prints a nice error "banner" in the console with the text in
# $1 in the center
print_error_banner() {
    echo
    echo "### ERROR: $1"
    echo
}

# Utility function to make a copy of the conf file
# $1 is the file
config_check_and_backup () {
    # can we write to the configuration file?
    if [ ! -w $1 ]; then
        echo "Cannot write to $1!"
        exit 1
    fi

    # let's see if we need a copy
    cp $1 $1.bak
    echo "-- Created the backup file at $1.bak"
}

# 3 parameters: the file, the variable name, the new value
config_yml_get_value_from_user() {
    echo -n "- "
    grep "^[[:blank:]]*\(${2}\):.*" $1 -m 1 | sed "s/[[:space:]]*\(.*\)/\1/"
    echo -n "  Enter a new value [leave blank to skip]: "

    # get the new value from the user
    read -r USER_INPUT
    if [ $USER_INPUT ]; then
        # anything between "parameter:" and end-of-line or '#' will be replaced by the user input
        sed -i "s/\(^[[:space:]]*${2}:\)[^#$]*\(.*\)$/\1 \"${USER_INPUT}\" \2/g" $1
        echo "  New value: \"${USER_INPUT}\""
    fi
}

# Configures the file $1 (a yml file)
# Ask the user for values to the parameters in the array $2
config_yml_file() {
    config_check_and_backup $1
    echo

    if [ ! -f $1 ]; then
        print_error_banner "The configuration file $1 doesn't exists. Please, run this script with the option --setup-dev."
        exit 1
    fi
    FILENAME=$1

    while [ $2 ]; do
        config_yml_get_value_from_user $FILENAME $2
        echo
        shift
    done
}

# Check if rvm is installed
# Returns true or false in $RVM_INSTALLED
rvm_check() {
    echo "-- Checking if RVM is installed"

    RVM_INSTALLED="false"
    which rvm
    if [ $? = 0 ]; then
        RVM_TYPE=`type rvm | head -1`
        if [ "$RVM_TYPE" = "rvm is a function" ]; then
            RVM_INSTALLED="true"
        else
            echo "-- RVM not loaded!"
        fi
    else
        echo "-- RVM not found!"
    fi
}

# Installs the base of RVM
# TODO: install RVM as root?
rvm_install() {
    install_dependencies "curl git"

    echo "-- Downloading and installing RVM version $RVM_VERSION"
    curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer ; chmod +x rvm-installer ; ./rvm-installer --version $RVM_VERSION

    echo "-- Loading RVM in the current bash"
    touch ~/.bash_profile
    if ! cat ~/.bash_profile | grep -q ".rvm/scripts/rvm"; then
      echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile
    fi
    rvm_require
    # bash < <(curl -s https://rvm.beginrescueend.com/install/rvm) # to install the latest version only
}

# Install system packages suggested by "rvm notes"
# Uses the section "For Ruby (MRI & ree)  you should install the following OS dependencies"
rvm_notes_install_packages() {
    RVM_PACKAGES=`rvm notes | grep "^\s*ruby:.*aptitude install" | head -1 | sed 's/.*aptitude install //g'`
    install_dependencies "$RVM_PACKAGES"
}

# Installs ruby using rvm and creates the default gemset
rvm_ruby_and_gemset() {
    if ! rvm list | grep -q $RVM_RUBY_VERSION; then
        rvm install $RVM_RUBY_VERSION
    fi
    rvm use $RVM_RUBY_VERSION
    rvm gemset clear
    rvm gemset create $RVM_GEMSET
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET # TODO: --default
}

rvm_require() {
    source "$HOME/.rvm/scripts/rvm"
}

# Check if the checkout destination dir exists and if it has a copy of mconf-web already there
# Sets $CHECKOUT_REPO_VERSION with the version got from the repo if the above is true
checkout_get_version_from_repo() {
    if [ -d $CHECKOUT_SRC_DIR ]; then
        CHECKOUT_REPO_VERSION=""
        if [ -f $CHECKOUT_SRC_DIR/config/version.rb ]; then
            if cat $CHECKOUT_SRC_DIR/config/version.rb | grep -q "module Vcc"; then
                CHECKOUT_REPO_VERSION=`cat $CHECKOUT_SRC_DIR/config/version.rb | grep "VERSION" | sed 's/[^"]*"\([^"]*\)".*/\1/g'`
            fi
        fi
    fi
}

# Check if the destination dir exists and if it has a copy of mconf-web already there
# Sets $CHECKOUT_UPDATE if the above is true
# Exists if the dir exists and has something else than mconf-web
checkout_check_update() {
    if [ -d $CHECKOUT_SRC_DIR ]; then # if the target dir exists...
        checkout_get_version_from_repo
        if [ $CHECKOUT_REPO_VERSION ]; then
            CHECKOUT_UPDATE=true
        fi
        if [ ! $CHECKOUT_UPDATE ]; then # ... and it's not mconf-web = error
            print_error_banner "$CHECKOUT_SRC_DIR already exists. Please delete it to be able to checkout Mconf-Web."
            exit 1
        fi
    fi
}

# Includes a file with the list of dependencies for mconf-web
# This file is in the source code dir, at script/packages.<platformname>
# TODO: get the package list from github if there's no local repo?
dependencies_include_package_list_from_source() {
    if [ -d $CHECKOUT_SRC_DIR ]; then
        if [ -f $CHECKOUT_SRC_DIR/script/packages.$PLATFORM ]; then
            source $CHECKOUT_SRC_DIR/script/packages.$PLATFORM
        else
            print_error_banner "Package list not found! $CHECKOUT_SRC_DIR/script/packages.$PLATFORM"
            exit 1
        fi
    else
        print_error_banner "You need the source code to run this command. Please, run this script with the option --checkout to get the code."
        exit 1
    fi
}

# Install the gem $1
gem_install()
{
    rvm_require
    gem install $1 --no-ri --no-rdoc
}


#
# Figure out our environment
#

# Check the current platform
# We only support Ubuntu for now
# About linux distros: http://linuxmafia.com/faq/Admin/release-files.html

PLATFORM=""
if [ "`uname`" = "Linux" ]; then
    if [ -f /etc/lsb-release ]; then
        if grep -q Ubuntu /etc/lsb-release; then
            PLATFORM=ubuntu
        fi
    fi

    if [ $PLATFORM != ubuntu ]; then
        CUR_PLATFORM=`ls /etc/*-release | xargs grep DISTRIB_ID | sed 's/DISTRIB_ID=//g'`
        print_error_banner "Sorry, but this script cannot be run in your platform: $CUR_PLATFORM"
        exit 1
    fi
else
    print_error_banner "Are you not on linux? Sorry, but this script cannot be run in your platform."
    exit 1
fi


#
# Parse the parameters
#

while [ $# -gt 0 ]; do

    if [ "$1" = "--version" -o "$1" = "-version" -o "$1" = "-v" ]; then
        VERSION=1
        shift
        continue
    fi

    if [ "$1" = "--help" -o "$1" = "-help" -o "$1" = "-h" ]; then
        usage
        exit 0
    fi

    if [ "$1" = "--install-ruby" -o "$1" = "-install-ruby" ]; then
        echo "- Request to install RVM/Ruby"
        RUBY=1
        shift
        continue
    fi

    if [ "$1" = "--checkout" -o "$1" = "-checkout" ]; then
        echo "- Request to checkout Mconf-Web"
        CHECKOUT=1
        shift
        if [[ $# -ge 1 && ! "$1" =~ -.* ]]; then
            CHECKOUT_REPO="${1}"
            shift
        fi
        echo "-- Checkout from: $CHECKOUT_REPO"
        continue
    fi

    if [ "$1" = "--install-packages" -o "$1" = "-install-packages" ]; then
        echo "- Request to install system packages dependencies for Mconf-Web"
        DEPENDENCIES=1
        DEPENDENCIES_ENV="" # to install both dev and production
        shift
        if [[ $# -ge 1 && ! "$1" =~ -.* ]]; then
            DEPENDENCIES_ENV="${1}"
            echo "-- Dependencies for the environment: $DEPENDENCIES_ENV"
            shift
        else
            echo "-- Dependencies for the environments: development and production"
        fi
        continue
    fi

    if [ "$1" = "--setup-dev" -o "$1" = "-setup-dev" ]; then
        echo "- Request to setup the development environment"
        SETUP_DEV=1
        shift
        continue
    fi

    if [ "$1" = "--setup-prod" -o "$1" = "-setup-prod" ]; then
        echo "- Request to setup the production environment"
        SETUP_PROD=1
        shift
        continue
    fi

    # General options

    if [ "$1" = "--source" -o "$1" = "-s" ]; then
        echo "- Setting source directory to \"$2\""
        CHECKOUT_SRC_DIR="$2"
        shift; shift
        continue
    fi

    usage
    exit 1
done


#
# Version
#

if [ $VERSION ]; then
    echo
    echo "Script version: $MCONF_WEB_VERSION"
    checkout_get_version_from_repo
    if [ $CHECKOUT_REPO_VERSION ]; then
        echo "Found a repository set with the version: $CHECKOUT_REPO_VERSION"
    fi
    echo
    exit 0
fi


#
# Install Ruby
#

if [ $RUBY ]; then
    check_root

    # installs RVM if not present (https://rvm.beginrescueend.com/rvm/install/)
    rvm_check
    if [ $RVM_INSTALLED = "true" ]; then
        echo "-- RVM already installed at $(which rvm)"
    else
        echo "-- Installing RVM..."
        rvm_install
    fi

    rvm_check # double check to ensure the installation was successful
    if [ $RVM_INSTALLED = "true" ]; then
        rvm_notes_install_packages
        rvm_ruby_and_gemset
        print_banner "RVM/Ruby installed successfully."
    else
        print_error_banner "Something went wrong installing ruby. Check the messages above and try again."
    fi
fi


#
# Setup the development environemnt.
#

if [ $CHECKOUT ]; then
    check_root

    install_dependency "git"
    checkout_check_update

    echo "-- Creating the src directory: $CHECKOUT_SRC_DIR"
    mkdir -p $CHECKOUT_SRC_DIR

    if [ $CHECKOUT_UPDATE ]; then
        cd $CHECKOUT_SRC_DIR

        echo "-- Checking out branch $CHECKOUT_BRANCH"
        git checkout $CHECKOUT_BRANCH

        echo "-- Pulling $CHECKOUT_BRANCH from origin."
        git pull origin $CHECKOUT_BRANCH
    else
        echo "-- Cloning Mconf-Web."
        cd  $CHECKOUT_SRC_DIR/../
        git clone $CHECKOUT_REPO $CHECKOUT_SRC_DIR

        cd $CHECKOUT_SRC_DIR
        echo "-- Checking out branch $CHECKOUT_BRANCH"
        git checkout $CHECKOUT_BRANCH
    fi

    print_banner "Checked out Mconf-Web"
fi


#
# Mconf-Web system packages
#

if [ $DEPENDENCIES ]; then
    dependencies_include_package_list_from_source

    DEPENDENCIES_ENV="`echo $DEPENDENCIES_ENV|tr '[:lower:]' '[:upper:]'`" # var to upper case

    # if not set, installs both environments
    if [ ! $DEPENDENCIES_ENV ]; then
        echo "-- Installing dependencies for DEVELOPMENT and PRODUCTION"
        install_dependencies "${PACKAGES_DEVELOPMENT[*]}"
        install_dependencies "${PACKAGES_PRODUCTION[*]}"
    elif [ "$DEPENDENCIES_ENV" = "PRODUCTION" -o "$DEPENDENCIES_ENV" = "PROD" ]; then
        echo "-- Installing dependencies for PRODUCTION only"
        install_dependencies "${PACKAGES_PRODUCTION[*]}"
    elif [ "$DEPENDENCIES_ENV" = "DEVELOPMENT" -o "$DEPENDENCIES_ENV" = "DEV" ]; then
        echo "-- Installing dependencies for DEVELOPMENT only"
        install_dependencies "${PACKAGES_DEVELOPMENT[*]}"

    # wrong parameter, show error
    else
        print_error_banner "Invalid environment: \"$DEPENDENCIES_ENV\". See the help for more information."
        exit 1
    fi

    print_banner "Dependencies installed successfully."
fi


#
# Setup the development environment
# Install gems, run rake tasks, setup config files
#

# Opens the configurations files and prompts the user for values to edit
# the most important attributes
setup_dev_files_setup() {
    echo
    echo "#####################################################################"
    echo "#         Setup configuration files. Do it carefully                #"
    echo "#####################################################################"
    echo

    # only require values for the most important parameters

    echo "GENERAL configurations:"
    echo " - Here you will configure the admin account, a default BBB server and a gmail"
    echo "   account used to send emails."
    echo "-----------------------------------------------------------------------------------"
    echo
    PARAMS=( admin_login admin_fullname admin_email admin_password \
             bbb_server_name bbb_server_url bbb_server_salt bbb_server_version \
             sendmail_username sendmail_password )
    config_yml_file "$CHECKOUT_SRC_DIR/config/setup_conf.yml" ${PARAMS[*]}


    echo
    echo "DATABASE configurations:"
    echo " - The default database is MySQL. You need to provide an username and a password."
    echo "-----------------------------------------------------------------------------------"
    echo
    PARAMS=( username password )
    config_yml_file "$CHECKOUT_SRC_DIR/config/database.yml" ${PARAMS[*]}

    echo
    echo "DEPLOYMENT configurations:"
    echo " - To deploy in this machine, set the IP to 127.0.0.1 and the user to \"`whoami`\"."
    echo "-----------------------------------------------------------------------------------"
    echo
    PARAMS=( server user repository branch )
    config_yml_file "$CHECKOUT_SRC_DIR/config/deploy/conf.yml" ${PARAMS[*]}
}

if [ $SETUP_DEV ]; then

    checkout_get_version_from_repo
    if [ ! $CHECKOUT_REPO_VERSION ]; then
        print_error_banner "You need the source code to run this command. Please, run this script with the option --checkout to get the code."
        exit 1
    fi

    cd $CHECKOUT_SRC_DIR
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET

    echo "-- Installing gems"
    gem_install bundler
    bundle install

    echo "-- Creating the configuration files"
    bundle exec rake setup:basic

    echo "-- Editing configuration files"
    setup_dev_files_setup

    echo "-- Setting up the database"
    bundle exec rake setup:db
fi

#
# Setup the production environment
#

if [ $SETUP_PROD ]; then

    checkout_get_version_from_repo
    if [ ! $CHECKOUT_REPO_VERSION ]; then
        print_error_banner "You need the source code to run this command. Please, run this script with --checkout and then --setup-dev."
        exit 1
    fi

    cd $CHECKOUT_SRC_DIR
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    # TODO: new gemset for production?

    echo "-- Installing passenger"
    gem_install passenger

    # TODO: detect nginx
    # TODO: warn the user that he will enter the "passenger install process"
    echo "-- Installing nginx"
    rvmsudo passenger-install-nginx-module

#    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET

#    echo "-- Installing gems"
#    gem install bundler && bundle install

#    echo "-- Creating the configuration files"
#    bundle exec rake setup:basic

#    echo "-- Editing configuration files"
#    setup_dev_files_setup

#    echo "-- Setting up the database"
#    bundle exec rake setup:db
fi
