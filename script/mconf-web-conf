#!/bin/bash
#
# Mconf-Web configuration script.
#
# This file is part of Mconf - http://code.google.com/p/mconf
# This file was based on "bbb-conf" from BigBlueButton (http://www.bigbluebutton.org)
#
# Author(s):
#       Leonardo Crauss Daronco <leonardodaronco@gmail.com>
#
# Changelog:
#   2011-07-05 LCD  Inital Version


# TODO: questions at the beginning:
#       - dev, prod, dev + prod
#       - BBB in the same machine?
# TODO: --check
# TODO: ssh keys for production?


#
# Environment variables
#

MCONF_WEB_VERSION="0.2"                                 # The version of this script

RVM_VERSION=1.6.21                                      # to fix the RVM version to be installed
RVM_RUBY_VERSION=1.9.2                                  # Ruby version
RVM_GEMSET=mconf                                        # gemset for development (also defined in mconf-web/.rvmrc)
RVM_PRODUCTION_GEMSET=mconf_production                  # gemset for production (also defined in mconf-web/config/deploy.rb)

DEVELOPMENT_SRC_PATH=~/dev/source/mconf-web             # local directory where the dev environment will be placed
DEVELOPMENT_REPO=git://github.com/mconf/mconf-web.git   # used to checkout the dev environment (not for production)
DEVELOPMENT_BRANCH=script_conf                          # branch to be checked out

NGINX_VERSION=1.0.0                                     # default version for nginx installed by passenger
NGINX_DAEMON=/opt/nginx/sbin/nginx                      # default path for nginx installed by passenger

PRODUCTION_PATH=~/mconf-web/                            # local directory for production
                                                        # (this is defined in mconf-web/config/deploy.rb, see the vars "application" and "deploy_to")

GEM_BUNDLER_VERSION=1.0.15                              # bundler version
GEM_VERSION_PASSENGER=3.0.7                             # passenger version

# local IP got from ifconfig
IP=$(ifconfig | grep -v '127.0.0.1' | grep -E "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | head -1 | cut -d: -f2 | awk '{print $1}')


#
# Usage and first check for parameters
#

usage() {
    echo "Mconf-Web Configuration Utility - Version $MCONF_WEB_VERSION"
    echo "http://code.google.com/p/mconf"
    echo
    echo "   mconf-web-conf [commands] [options]"
    echo
    echo "Commands:"
    echo
    echo "  General:"
    echo "    --help, -h                       Shows this help"
    echo "    --version, -v                    Display version"
    echo "  Setup and configuration:"
    echo "    --install-ruby                   Install ruby (using RVM)"
    echo "    --install-packages [ENV]         Install dependencies to run Mconf-Web (default: installs for both envs)"
    echo "                                     ENV can be 'dev' or 'prod' (without quotes)"
    echo "  Development:"
    echo "    --checkout [REPO]                Checkout the repository from the default repo or from REPO"
    echo "                                     REPO can be any git url (default: $DEVELOPMENT_REPO)"
    echo "    --setup-dev                      Setup the development environment"
    echo "  Production:"
    echo "    --setup-prod                     Setup the production environment (you need to --setup-dev before)"
    echo "    --deploy-first-time              First deploy (executes cap deploy:all)"
    echo "    --deploy-restart                 Restarts the deployed app (executes cap deploy:restart)"
    echo "    --deploy-update                  Updates the deployed app code and runs the migrations (executes cap deploy:migrations)"
    echo
    echo "Options:"
    echo
    echo "   --source, -s                      Set the directory to checkout the source code (or where the code already is)"
    echo
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi



#
# Helper functions
#

check_root() {
    if [ $EUID == 0 ]; then
        echo "This operation should not be run as root."
        echo
        echo "If this operation needs to execute an operation as root, you'll be asked for"
        echo "your password to execute the operation using sudo."
        exit 1
    fi
}

# need_root() {
#     if [ $EUID != 0 ]; then
#         echo "Need to be root to run this option"
#         exit 1
#     fi
# }

# Install a package in the system
# $1 is the package and binary name
install_dependency() {
    which $1
    if [ $? != 0 ]; then
        echo "-- Installing dependency: $1"
        sudo apt-get install $1 -y --force-yes
    else
        echo "-- Dependency '$1' already installed"
    fi
}

# Install a list of packages in the system
# $1 is the list of packages
install_dependencies() {
    echo "-- Installing dependencies: $1"
    sudo apt-get install $1 -y --force-yes
}

# Prints a nice "banner" in the console with the text in
# $1 in the center
print_banner() {
    echo
    echo "-- $1"
    echo
}

# Prints a nice error "banner" in the console with the text in
# $1 in the center
print_error_banner() {
    echo
    echo "### ERROR: $1"
    echo
}

# Utility function to make a copy of the conf file
# $1 is the file
config_check_and_backup () {
    # can we write to the configuration file?
    if [ ! -w $1 ]; then
        echo "Cannot write to $1!"
        exit 1
    fi

    # let's see if we need a copy
    cp $1 $1.bak
    echo "-- Created the backup file at $1.bak"
}

# 3 parameters: the file, the variable name, the new value
config_yml_get_value_from_user() {
    echo -n "- "
    grep "^[[:blank:]]*\(${2}\):.*" $1 -m 1 | sed "s/[[:space:]]*\(.*\)\(#.*\)$/Parameter \"${2}\": \2/" | sed "s/#[[:space:]]*//"
    echo -n "  Current value: "
    grep "^[[:blank:]]*\(${2}\):.*" $1 -m 1 | sed "s/[[:space:]]*${2}:[[:space:]]*\(.*\)\(#.*\)$/\1/"

    echo -n "  Enter a new value [leave blank to skip]: "

    # get the new value from the user
    read -r USER_INPUT
    if [ $USER_INPUT ]; then
        # anything between "parameter:" and end-of-line or '#' will be replaced by the user input
        echo "  New value: \"${USER_INPUT}\""
	USER_INPUT=${USER_INPUT//\//\\/} # escape all slashes
        sed -i "s/\(^[[:space:]]*${2}:\)[^#$]*\(.*\)$/\1 \"${USER_INPUT}\" \2/g" $1
    fi
}

# Configures the file $1 (a yml file)
# Ask the user for values to the parameters in the array $2
config_yml_file() {
    config_check_and_backup $1
    echo

    if [ ! -f $1 ]; then
        print_error_banner "The configuration file $1 doesn't exists. Please, run this script with the option --setup-dev."
        exit 1
    fi
    FILENAME=$1

    while [ $2 ]; do
        config_yml_get_value_from_user $FILENAME $2
        echo
        shift
    done
}

# Echoes the parameters $2 from the file $1
echo_yml_file() {
    if [ ! -f $1 ]; then
        print_error_banner "The configuration file $1 doesn't exists. Please, run this script with the option --setup-dev."
        exit 1
    fi
    FILENAME=$1

    echo "File ${FILENAME}"
    while [ $2 ]; do
        grep "^[[:blank:]]*\(${2}\):.*" $FILENAME -m 1 | sed "s/[[:space:]]*\(.*\)\(#.*\)$/\1/"
        shift
    done
}

# Calls config_yml_file until the user is satisfied
# The list of parameters should be at PARAMS
config_yml_file_with_review() {
    REPLY=y
    while [[ $REPLY == [yY] ]]; do
        config_yml_file $1 ${PARAMS[*]}
        read -p "Press enter to review the configurations..."
        echo "-----------------------------------------------------------------------------------"
        echo_yml_file $1 ${PARAMS[*]}
        echo "-----------------------------------------------------------------------------------"
        read -p "Do you need to edit these configurations again? (y/n)"
    done
}

# Check if rvm is installed
# Returns true or false in $RVM_INSTALLED
rvm_check() {
    echo "-- Checking if RVM is installed"

    REPLY=
    which rvm
    if [ $? = 0 ]; then
        RVM_TYPE=`type rvm | head -1`
        if [ "$RVM_TYPE" = "rvm is a function" ]; then
            REPLY=1
        else
            echo "-- RVM not loaded!"
        fi
    else
        echo "-- RVM not found!"
    fi
}

# Makes rvm visible to this script
rvm_require() {
    source "$HOME/.rvm/scripts/rvm"
}

# Installs the base of RVM
# TODO: install RVM as root?
rvm_install() {
    install_dependencies "curl git"

    echo "-- Downloading and installing RVM version $RVM_VERSION"
    curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer ; chmod +x rvm-installer ; ./rvm-installer --version $RVM_VERSION

    echo "-- Loading RVM in the current bash"
    touch ~/.profile
    if ! cat ~/.profile | grep -q ".rvm/scripts/rvm"; then
      echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.profile
    fi
    rvm_require
    # bash < <(curl -s https://rvm.beginrescueend.com/install/rvm) # to install the latest version only
}

# Install system packages suggested by "rvm notes"
# Uses the section "For Ruby (MRI & ree)  you should install the following OS dependencies"
rvm_notes_install_packages() {
    RVM_PACKAGES=`rvm notes | grep "^\s*ruby:.*aptitude install" | head -1 | sed 's/.*aptitude install //g'`
    install_dependencies "$RVM_PACKAGES"
}

# Installs ruby using rvm and creates the default gemset
rvm_ruby_and_gemset() {
    rvm package install openssl
    if rvm list | grep -q $RVM_RUBY_VERSION; then
        rvm remove $RVM_RUBY_VERSION
    fi
    rvm install $RVM_RUBY_VERSION -C --with-openssl-dir=$HOME/.rvm/usr
    rvm use $RVM_RUBY_VERSION
    rvm gemset clear
    rvm gemset create $RVM_GEMSET
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET # TODO: --default
}

# Check if the checkout destination dir exists and if it has a copy of mconf-web already there
# Sets $REPLY with the version got from the repo if the above is true
checkout_get_version_from_repo() {
    if [ -d $DEVELOPMENT_SRC_PATH ]; then
        REPLY=
        if [ -f $DEVELOPMENT_SRC_PATH/config/version.rb ]; then
            if cat $DEVELOPMENT_SRC_PATH/config/version.rb | grep -q "module Vcc"; then
                REPLY=`cat $DEVELOPMENT_SRC_PATH/config/version.rb | grep "VERSION" | sed 's/[^"]*"\([^"]*\)".*/\1/g'`
            fi
        fi
    fi
}

# Check if the destination dir exists and if it has a copy of mconf-web already there
# Sets $REPLY if the above is true
# Exists if the dir exists and has something else than mconf-web
checkout_check_update() {
    REPLY=
    if [ -d $DEVELOPMENT_SRC_PATH ]; then # if the target dir exists...
        checkout_get_version_from_repo
        if [ ! $REPLY ]; then # ... and it's not mconf-web = error
            print_error_banner "$DEVELOPMENT_SRC_PATH already exists. Please delete it to be able to checkout Mconf-Web."
            exit 1
        else
            REPLY=1
        fi
    fi
}

# Checks if there's already an application deployed
# Sets $REPLY if true
deployed_application_check() {
    REPLY=
    if [ -d $PRODUCTION_PATH ]; then
        REPLY=1
    fi
    # TODO: also check if the app is configured (check config/setup_conf.yml possibly)
}

# Exits if the source code was checked out
# Ensures --checkout was called
require_checkout() {
    checkout_get_version_from_repo
    if [ ! $REPLY ]; then
        print_error_banner "You need the source code to run this command. Please, run this script with the option --checkout to get the code."
        exit 1
    fi
}

# Exits if the development environment doesn't exists
# Ensures --setup-dev was called
require_dev_environment() {
    require_checkout
    # TODO: also check if the env is configured (check config/setup_conf.yml possibly)
    # TODO: check rvm
}

# Exits if the production environment doesn't exists
# Ensures --setup-prod was called
require_prod_environment() {
    # TODO: check rvm
    # TODO:
    echo "Pending..."
}

# Exits if the application was not deployed yet
# Ensures --deploy-first-time was called
require_deployed_application() {
    deployed_application_check
    if [ ! $REPLY ]; then
        print_error_banner "You need to deploy the application first. Please, run this script with the option --deploy-first-time."
        exit 1
    fi
}

# Includes a file with the list of dependencies for mconf-web
# This file is in the source code dir, at config/packages.<platformname>
# TODO: get the package list from github if there's no local repo?
dependencies_include_package_list_from_source() {
    if [ -d $DEVELOPMENT_SRC_PATH ]; then
        if [ -f $DEVELOPMENT_SRC_PATH/config/packages.$PLATFORM ]; then
            source $DEVELOPMENT_SRC_PATH/config/packages.$PLATFORM
        else
            print_error_banner "Package list not found! $DEVELOPMENT_SRC_PATH/script/packages.$PLATFORM"
            exit 1
        fi
    else
        print_error_banner "You need the source code to run this command. Please, run this script with the option --checkout to get the code."
        exit 1
    fi
}

# Install the gem $1
gem_install()
{
    rvm_require
    if [[ $# -ge 2 ]]; then
        GEM_VERSION="-v ${2}"
    fi
    gem install $1 --no-ri --no-rdoc $GEM_VERSION
    GEM_VERSION=
}

# sets $REPLY if nginx is found in the system
nginx_check() {
    REPLY=

    # if nginx is installed with dpkg (BigBlueButton uses it)
    if dpkg-query -s nginx 1>/dev/null; then
        REPLY=1
	NGINX_DAEMON=`which nginx`
	NGINX_VERSION=`dpkg-query -W -f='${Version}\n' nginx | sed 's/\(^[[:digit:]\.]*\).*/\1/'`

    # tests for the default nginx installed by passenger
    else
	if test -x $NGINX_DAEMON; then
            REPLY=1
	    NGINX_VERSION=`$NGINX_DAEMON -v 2>&1 | sed 's/^.*\/\(.*\)$/\1/'`
	fi
    fi
}

# Installs nginx using passenger
nginx_install() {
    # FIXME: There's something with .rvmrc that requires us to call these 2 lines again
    # or rvmsudo won't be found
    # install passenger in the dev environment
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_PRODUCTION_GEMSET
    rvmsudo passenger-install-nginx-module --auto --auto-download --prefix=/etc/nginx
    # TODO: to uninstall nginx, we'll have to install it from source? (--nginx-source-dir=DIR --extra-configure-flags=STRING)

#--prefix=/opt/nginx

    # installs the init.d/nginx file
    sudo curl https://raw.github.com/mconf/mconf-web/master/config/nginx.init.example -o /etc/init.d/nginx

    # configures /opt/nginx/conf/nginx.conf
    # TODO: only do it if the file is not already configured
    TEMP=`mktemp`
    # TODO: fix link below (change branch)
    curl https://raw.github.com/mconf/mconf-web/script_conf/config/nginx.1.0.conf.example -o $TEMP
    sudo sed -i "s/server_name .*;/server_name $IP;/g" $TEMP
    sudo sed -i "s>root .*;>root $PRODUCTION_PATH/current/public;>g" $TEMP
    sudo sed -i "/http.*{/ r $TEMP" /opt/nginx/conf/nginx.conf
}

# Echoes the nginx version
nginx_check_version() {
    nginx_check
    echo "Nginx:"
    echo "  version: $NGINX_VERSION"
    echo "  at: $NGINX_DAEMON"
}

# Setup the gem environment for production
# Basically creates a gemset and installs some gems
setup_prod_setup_gemenv() {
    cd $DEVELOPMENT_SRC_PATH
    rvm_require

    # Ruby is already installed for the dev environment, so we just need the gemset and gems
    rvm use $RVM_RUBY_VERSION
    rvm gemset create $RVM_PRODUCTION_GEMSET
    rvm use $RVM_RUBY_VERSION@$RVM_PRODUCTION_GEMSET
    gem_install bundler $GEM_VERSION_BUNDLER
    gem_install passenger $GEM_VERSION_PASSENGER
}

# Runs the capistrano task setup:all
# First setup of a production environment
capistrano_setup_all() {
    cd $DEVELOPMENT_SRC_PATH
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    cap production setup:all -s auto_accept=1
}

# Runs the capistrano task deploy:restart
# Restarts the deployed application
capistrano_deploy_restart() {
    cd $DEVELOPMENT_SRC_PATH
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    cap production deploy:restart -s auto_accept=1
}

# Runs the capistrano task deploy:migrations
# Updates the deployed application code and runs the migrations
capistrano_deploy_update() {
    cd $DEVELOPMENT_SRC_PATH
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    cap production deploy:migrations -s auto_accept=1
}


#
# Figure out our environment
#

# Check the current platform
# We only support Ubuntu for now
# About linux distros: http://linuxmafia.com/faq/Admin/release-files.html

PLATFORM=""
if [ "`uname`" = "Linux" ]; then
    if [ -f /etc/lsb-release ]; then
        if grep -q Ubuntu /etc/lsb-release; then
            PLATFORM=ubuntu
        fi
    fi

    if [ $PLATFORM != ubuntu ]; then
        CUR_PLATFORM=`ls /etc/*-release | xargs grep DISTRIB_ID | sed 's/DISTRIB_ID=//g'`
        print_error_banner "Sorry, but this script cannot be run in your platform: $CUR_PLATFORM"
        exit 1
    fi
else
    print_error_banner "Are you not on linux? Sorry, but this script cannot be run in your platform."
    exit 1
fi


#
# Parse the parameters
#

while [ $# -gt 0 ]; do

    if [ "$1" = "--version" -o "$1" = "-version" -o "$1" = "-v" ]; then
        VERSION=1
        shift
        continue
    fi

    if [ "$1" = "--help" -o "$1" = "-help" -o "$1" = "-h" ]; then
        usage
        exit 0
    fi

    if [ "$1" = "--install-ruby" -o "$1" = "-install-ruby" ]; then
        echo "- Request to install RVM/Ruby"
        RUBY=1
        shift
        continue
    fi

    if [ "$1" = "--checkout" -o "$1" = "-checkout" ]; then
        echo "- Request to checkout Mconf-Web"
        CHECKOUT=1
        shift
        if [[ $# -ge 1 && ! "$1" =~ -.* ]]; then
            DEVELOPMENT_REPO="${1}"
            shift
        fi
        echo "-- Checkout from: $DEVELOPMENT_REPO"
        continue
    fi

    if [ "$1" = "--install-packages" -o "$1" = "-install-packages" ]; then
        echo "- Request to install system packages dependencies for Mconf-Web"
        DEPENDENCIES=1
        DEPENDENCIES_ENV="" # to install both dev and production
        shift
        if [[ $# -ge 1 && ! "$1" =~ -.* ]]; then
            DEPENDENCIES_ENV="${1}"
            echo "-- Dependencies for the environment: $DEPENDENCIES_ENV"
            shift
        else
            echo "-- Dependencies for the environments: development and production"
        fi
        continue
    fi

    if [ "$1" = "--setup-dev" -o "$1" = "-setup-dev" ]; then
        echo "- Request to setup the development environment"
        SETUP_DEV=1
        shift
        continue
    fi

    if [ "$1" = "--setup-prod" -o "$1" = "-setup-prod" ]; then
        echo "- Request to setup the production environment"
        SETUP_PROD=1
        shift
        continue
    fi

    if [ "$1" = "--config" -o "$1" = "-config" ]; then
        echo "- Request to edit the configuration files"
        CONFIG=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-first-time" -o "$1" = "-deploy-first-time" ]; then
        echo "- Request to deploy for the first time"
        DEPLOY_FIRST_TIME=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-restart" -o "$1" = "-deploy-restart" ]; then
        echo "- Request to restart the deployed application"
        DEPLOY_RESTART=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-update" -o "$1" = "-deploy-update" ]; then
        echo "- Request to update the deployed application"
        DEPLOY_UPDATE=1
        shift
        continue
    fi

    # General options

    if [ "$1" = "--source" -o "$1" = "-s" ]; then
        echo "- Setting source directory to \"$2\""
        DEVELOPMENT_SRC_PATH="$2"
        shift; shift
        continue
    fi

    usage
    exit 1
done


#
# Version
#

if [ $VERSION ]; then
    echo
    echo "Script version: $MCONF_WEB_VERSION"
    checkout_get_version_from_repo
    if [ $REPLY ]; then
        echo "Found a repository set with the version: $REPLY"
    fi
    echo
    exit 0
fi


#
# Install Ruby
#

if [ $RUBY ]; then
    check_root

    # installs RVM if not present (https://rvm.beginrescueend.com/rvm/install/)
    rvm_check
    if [ $REPLY ]; then
        echo "-- RVM already installed at $(which rvm)"
    else
        echo "-- Installing RVM..."
        rvm_install
    fi

    rvm_check # double check to ensure the installation was successful
    if [ $REPLY ]; then
        rvm_notes_install_packages
        rvm_ruby_and_gemset
        print_banner "RVM/Ruby installed successfully."
    else
        print_error_banner "Something went wrong installing ruby. Check the messages above and try again."
    fi
fi


#
# Setup the development environemnt.
#

if [ $CHECKOUT ]; then
    check_root

    install_dependency "git"
    checkout_check_update

    echo "-- Creating the src directory: $DEVELOPMENT_SRC_PATH"
    mkdir -p $DEVELOPMENT_SRC_PATH

    if [ $REPLY ]; then
        cd $DEVELOPMENT_SRC_PATH

        echo "-- Checking out branch $DEVELOPMENT_BRANCH"
        git checkout $DEVELOPMENT_BRANCH

        echo "-- Pulling $DEVELOPMENT_BRANCH from origin."
        git pull origin $DEVELOPMENT_BRANCH
    else
        echo "-- Cloning Mconf-Web."
        cd  $DEVELOPMENT_SRC_PATH/../
        git clone $DEVELOPMENT_REPO $DEVELOPMENT_SRC_PATH

        cd $DEVELOPMENT_SRC_PATH
        echo "-- Checking out branch $DEVELOPMENT_BRANCH"
        git checkout $DEVELOPMENT_BRANCH
    fi

    print_banner "Checked out Mconf-Web"
fi


#
# Mconf-Web system packages
#

if [ $DEPENDENCIES ]; then
    check_root

    dependencies_include_package_list_from_source

    DEPENDENCIES_ENV="`echo $DEPENDENCIES_ENV|tr '[:lower:]' '[:upper:]'`" # var to upper case

    # if not set, installs both environments
    if [ ! $DEPENDENCIES_ENV ]; then
        echo "-- Installing dependencies for DEVELOPMENT and PRODUCTION"
        install_dependencies "${PACKAGES_DEVELOPMENT[*]}"
        install_dependencies "${PACKAGES_PRODUCTION[*]}"
    elif [ "$DEPENDENCIES_ENV" = "PRODUCTION" -o "$DEPENDENCIES_ENV" = "PROD" ]; then
        echo "-- Installing dependencies for PRODUCTION only"
        install_dependencies "${PACKAGES_PRODUCTION[*]}"
    elif [ "$DEPENDENCIES_ENV" = "DEVELOPMENT" -o "$DEPENDENCIES_ENV" = "DEV" ]; then
        echo "-- Installing dependencies for DEVELOPMENT only"
        install_dependencies "${PACKAGES_DEVELOPMENT[*]}"

    # wrong parameter, show error
    else
        print_error_banner "Invalid environment: \"$DEPENDENCIES_ENV\". See the help for more information."
        exit 1
    fi

    print_banner "Dependencies installed successfully."
fi


#
# Setup the development environment
# Install gems, run rake tasks, setup config files
#

# Opens the configurations files and prompts the user for values to edit
# the most important attributes
setup_dev_files_setup() {
    echo
    echo "###################################################################################"
    echo "#                Setup configuration files. Do it carefully.                      #"
    echo "###################################################################################"
    echo

    # require values for the most important parameters only

    echo "-----------------------------------------------------------------------------------"
    echo "GENERAL configurations:"
    echo " - Here you will configure the admin account, a default BBB server and a gmail"
    echo "   account used to send emails."
    echo "-----------------------------------------------------------------------------------"
    echo
    PARAMS=( admin_login admin_fullname admin_email admin_password \
             bbb_server_name bbb_server_url bbb_server_salt bbb_server_version \
             sendmail_username sendmail_password site_domain )
    config_yml_file_with_review "$DEVELOPMENT_SRC_PATH/config/setup_conf.yml"

    echo
    echo "-----------------------------------------------------------------------------------"
    echo "DATABASE configurations:"
    echo " - The default database is MySQL. You need to provide an username and a password."
    echo "-----------------------------------------------------------------------------------"
    echo
    PARAMS=( username password )
    config_yml_file_with_review "$DEVELOPMENT_SRC_PATH/config/database.yml" ${PARAMS[*]}

    echo
    echo "-----------------------------------------------------------------------------------"
    echo "DEPLOYMENT configurations:"
    echo " - To deploy in this machine, set the IP to 127.0.0.1 and the user to \"`whoami`\"."
    echo "-----------------------------------------------------------------------------------"
    echo
    PARAMS=( server user repository branch )
    config_yml_file_with_review "$DEVELOPMENT_SRC_PATH/config/deploy/conf.yml" ${PARAMS[*]}

    echo
}

if [ $SETUP_DEV ]; then
    check_root

    require_checkout

    cd $DEVELOPMENT_SRC_PATH
    rvm_require
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET

    echo "-- Installing gems"
    gem_install bundler $GEM_VERSION_BUNDLER
    bundle install

    echo "-- Creating the configuration files"
    bundle exec rake setup:basic

    echo "-- Editing configuration files"
    setup_dev_files_setup

    echo "-- Setting up the database"
    bundle exec rake setup:db

    print_banner "Development environment set up succesfully."
fi



#
# Setup the production environment
#

if [ $SETUP_PROD ]; then
    check_root

    require_dev_environment

    echo "-- Setting up gemset and gems for production"
    setup_prod_setup_gemenv

    # installs nginx only if it's not installed yet
    nginx_check
    if [ $REPLY ]; then

#	case $NGINX_VERSION in
#	    1.0.0)
                # warn the user and ask
		    # install nginx anyway
                    # just configure it
#		;;
#	    *)
		# if is_bigbluebutton_machine; then
		    # warning that nginx should be removed and a new version will be installed
		    # install new version
		    # configure nginx with mconf-web and bbb
		# else
                    # warn the user and ask
                        # install nginx anyway
                        # just configure it
		# fi
#		;;
#	esac

        echo
        echo "----------------------------------------------------------------------------------------"
        echo "You appear to have nginx already installed at $NGINX_DAEMON"
        echo "Do you want to install it anyway?"
	echo "Choose no to keep the current version (you will have to configure it manually)"
        echo "----------------------------------------------------------------------------------------"
        read -p "(y/n)?"
        if [[ $REPLY == [yY] ]]; then
            echo "-- Installing nginx"
            nginx_install
        else
            echo "-- Using the nginx already installed:"
            nginx_check_version
        fi

    else
        echo "-- Installing nginx"
        nginx_install
    fi

    print_banner "Production environment setup finished."

    echo "You can now deploy your application with the option --deploy-first-time"
fi


#
# Edit the configuration files
#

if [ $CONFIG ]; then
    check_root

    require_dev_environment

    echo "-- Editing configuration files"
    setup_dev_files_setup

    print_banner "Configuration files edition finished."
fi


#
# First time deploy. Goes in the dev environment and runs "cap deploy:all"
#

if [ $DEPLOY_FIRST_TIME ]; then
    check_root

    require_dev_environment
    require_prod_environment

    deployed_application_check
    if [ $REPLY ]; then

        echo
        echo "----------------------------------------------------------------------------------------"
        echo "You appear to already have a production environment at $PRODUCTION_PATH"
        echo "Do you want to setup over it anyways? If you say yes your DB will be erased!"
        echo "----------------------------------------------------------------------------------------"
        read -p "Proceed? (y/n)?"
        if [[ $REPLY == [yY] ]]; then
            echo "-- Starting the first deploy (with capistrano)"
            capistrano_setup_all
        else
            echo "-- Finishing setup."
        fi

    else
        echo "-- Starting the first deploy (with capistrano)"
        capistrano_setup_all
    fi

    print_banner "Application deployed."
fi


#
# Restarts the deployed application. Goes in the dev environment and runs "cap deploy:restart"
#

if [ $DEPLOY_RESTART ]; then
    check_root

    require_dev_environment
    require_prod_environment
    require_deployed_application

    echo "-- Restarting the deployed application (with capistrano)"
    capistrano_deploy_restart

    print_banner "Application restarted."
fi


#
# Updates the deployed application code and runs the migrations.
# Goes in the dev environment and runs "cap deploy:migrations"
#

if [ $DEPLOY_UPDATE ]; then
    check_root

    require_dev_environment
    require_prod_environment
    require_deployed_application

    echo "-- Updating the deployed application (with capistrano)"
    capistrano_deploy_update

    print_banner "Application udpated."
fi



