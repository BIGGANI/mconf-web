#!/bin/bash
#
# Mconf-Web configuration script.
#
# This file is part of Mconf - http://code.google.com/p/mconf
# This file was based on "bbb-conf" from BigBlueButton (http://www.bigbluebutton.org)
#
# See the change history for this file in our git at:
#  https://github.com/mconf/mconf-web/blob/latest/script/mconf-web-conf
#
# TODO:
#   * --check
#   * See other TODO: markers in the code
#
# Changelog:
#   2011-10-18 LCD  Files downloaded from github come from the latest branch not master anymore
#   2011-10-07 LCD  Version 0.3
#   2011-09-26 LCD  God installation and configuration
#   2011-09-23 LCD  The deployment now does not use capistrano and so it does not require a
#                   development environment.
#   2011-09-20 LCD  Started removing all development-related tasks, the script will be used
#                   for production only.
#   2011-09-12 LCD  RVM is now installed as multi-user.
#   2011-09-07 LCD  Started a cleanup in the script. It will be used for production only.
#   2011-07-05 LCD  Inital Version


#
# Environment variables
#

IP=$(ifconfig | grep -v '127.0.0.1' | grep -E "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | head -1 | cut -d: -f2 | awk '{print $1}') # local IP from ifconfig

SCRIPT_VERSION="0.3"                                    # The version of this script

RVM_VERSION=1.8.5                                       # fixed RVM version to be installed
RVM_RUBY_VERSION=1.9.2-p290                             # Ruby version
RVM_GEMSET=mconf                                        # gemset for production (also defined in mconf-web/config/deploy.rb)

DEPLOY_PATH=~/mconf-web/current                         # directory for the deployed application
DEPLOY_REPO=git://github.com/mconf/mconf-web.git        # used to checkout the production environment
DEPLOY_VERSION=                                         # set this variable to define an specific version to be installed
                                                        # if not set, it will use the latest version available

NGINX_VERSION=1.0.0                                     # default version for Nginx (used by Passenger)
NGINX_DAEMON=/opt/nginx/sbin/nginx                      # default path for the nginx daemon (used by Passenger)
APACHE_VERSION=2.2.14                                   # default version for Apache
APACHE_DAEMON=/usr/sbin/apache2                         # default path for the apache2 daemon
APACHE_PATH=/etc/apache2                                # default path for Apache

GEM_VERSION_BUNDLER=1.0.18                              # bundler version
GEM_VERSION_GOD=0.11.0                                  # god version
GEM_VERSION_PASSENGER=3.0.7                             # passenger version

BIGBLUEBUTTON_ALT_PORT=8888                             # alternative port for BigBlueButton if necessary (when Apache is installed)


#
# Usage and first check for parameters
#

usage() {
    echo "Mconf-Web Configuration Utility - Version $SCRIPT_VERSION"
    echo "http://code.google.com/p/mconf"
    echo
    echo "   mconf-web-conf [commands]"
    echo
    echo "Commands:"
    echo "  General:"
    echo "    --help, -h                       Shows this help"
    echo "    --version, -v                    Display version"
    echo
    echo "    --install-packages               Install dependencies to run Mconf-Web"
    echo "    --install-ruby                   Install ruby (using RVM)"
    echo "    --checkout                       Checkout the code and basic dependencies (git submodules and gems)"
    echo "    --deploy-setup                   Installs a web server and other system-wide applications and deploy the application"
    echo "                                     IMPORTANT: this will erase you database!"
    echo "    --restart                        Restarts the deployed app (executes cap deploy:restart)"
    echo "    --update                         Updates the deployed app code and runs the migrations (executes cap deploy:migrations)"
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi



#
# Helper functions
#

check_root() {
    if [ $EUID == 0 ]; then
        echo "This operation should NOT be run as root."
        echo
        echo "If this operation needs to execute an operation as root, you'll be asked for"
        echo "your password to execute the operation using sudo."
        exit 1
    fi
}

is_package_installed() {
    REPLY=
    if [[ "`dpkg-query -W -f='${Status}\n' $1 | cut -d" " -f3`" == "installed" ]]; then
        REPLY=1
    fi
}

is_bigbluebutton_installed() {
    # This is how bbb-conf checks for BigBlueButton. But we also check for the package "bigbluebutton".
    BBB_CONFIG=/usr/share/red5/webapps/bigbluebutton/WEB-INF/red5-web.xml
    is_package_installed bigbluebutton
    if [ $REPLY ] && [ -f $BBB_CONFIG ]; then
        REPLY=1
    else
        REPLY=
    fi
}

# Install a package in the system
# $1 is the package and binary name
install_dependency() {
    is_package_installed $1
    if [ $REPLY ]; then
        echo "-- Dependency '$1' already installed"
    else
        echo "-- Installing dependency: $1"
        sudo apt-get install $1 -y --force-yes
    fi
}

# Install a list of packages in the system
# $1 is the list of packages
install_dependencies() {
    echo "-- Installing dependencies: $1"
    sudo apt-get install $1 -y --force-yes
}

# Prints a nice "banner" in the console with the text in
# $1 in the center
print_banner() {
    echo
    echo "-- $1"
    echo
}

# Prints a nice error "banner" in the console with the text in
# $1 in the center
print_error_banner() {
    echo
    echo "### ERROR: $1"
    echo
}

# Check if rvm is installed
rvm_check() {
    echo "-- Checking if RVM is installed"

    REPLY=
    if [ -f /usr/local/rvm/bin/rvm ]; then
        REPLY=1
    else
        echo "-- RVM not found!"
    fi
}

# Exits if RVM is not installed
# Ensures --install-ruby was called
require_rvm() {
    rvm_check
    if [ ! $REPLY ]; then
        print_error_banner "You need RVM installed to run this command. Please run this script with the option --install-ruby."
        exit 1
    fi
}

# Installs RVM and Ruby
# Details at https://rvm.beginrescueend.com/rvm/install/
rvm_install() {
    install_dependency curl
    install_dependency git-core

    echo "-- Downloading and installing RVM version $RVM_VERSION"
    curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer
    chmod +x rvm-installer
    sudo ./rvm-installer --version $RVM_VERSION
    rm ./rvm-installer
    sudo adduser `whoami` rvm

    echo "-- Installing Ruby dependencies given by rvm requirements"
    # Uses the section "For Ruby (MRI & ree)  you should install the following OS dependencies"
    RVM_PACKAGES=`sudo /usr/local/rvm/bin/rvm requirements | grep "^\s*ruby:.*install" | head -1 | sed 's/.* install //g'`
    install_dependencies "$RVM_PACKAGES"

    echo "-- Installing Ruby ${RVM_RUBY_VERSION} and configuring"
    RVM=/usr/local/rvm/bin/rvm
    sudo $RVM pkg install openssl
    if sudo $RVM list | grep -q $RVM_RUBY_VERSION; then
        sudo $RVM remove $RVM_RUBY_VERSION
    fi
    sudo $RVM install $RVM_RUBY_VERSION -C --with-openssl-dir=$HOME/.rvm/usr
    sudo $RVM use $RVM_RUBY_VERSION@$RVM_GEMSET --create --default
}

# Ensures --deploy-setup was called
require_deployed_application() {
    REPLY=
    if [ -d $DEPLOY_PATH ]; then
        if [ -f $DEPLOY_PATH/config/setup_conf.yml -a -f $DEPLOY_PATH/config/database.yml  ]; then
            REPLY=1
        fi
    fi
    if [ ! $REPLY ]; then
        print_error_banner "You need to deploy the application first."
        exit 1
    fi
}

# sets $REPLY if nginx is found in the system
nginx_check() {
    REPLY=

    # if nginx is installed with dpkg (BigBlueButton uses it)
    if dpkg-query -s nginx 1>/dev/null; then
        REPLY=1
        NGINX_DAEMON=`which nginx`
        NGINX_VERSION=`dpkg-query -W -f='${Version}\n' nginx | sed 's/\(^[[:digit:]\.]*\).*/\1/'`

    # tests for the default nginx installed by passenger
    else
        if test -x $NGINX_DAEMON; then
            REPLY=1
            NGINX_VERSION=`$NGINX_DAEMON -v 2>&1 | sed 's/^.*\/\(.*\)$/\1/'`
        fi
    fi
}

# Echoes the nginx version
nginx_check_version() {
    nginx_check
    echo "Nginx:"
    echo "  version: $NGINX_VERSION"
    echo "  at: $NGINX_DAEMON"
}

# Installs nginx using passenger
nginx_install() {
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    gem install passenger --no-ri --no-rdoc -v $GEM_VERSION_PASSENGER
    rvmsudo passenger-install-apache2-module -a

    echo "-- Configuring Apache to enable Passenger and Mconf-Web"

    # enable the rewrite module and passenger
    sudo ln -f -s $APACHE_PATH/mods-available/rewrite.load $APACHE_PATH/mods-enabled/rewrite.load &>/dev/null
    rvmsudo passenger-install-apache2-module --snippet | sudo tee $APACHE_PATH/conf.d/mconf-passenger &>/dev/null
    sudo rm $APACHE_PATH/sites-enabled/*

    # configures and creates the mconf-web virtual host
    TEMP=`mktemp`
    curl https://raw.github.com/mconf/mconf-web/latest/config/apache2.conf.example -o $TEMP
    sudo sed -i "s#ServerName .*#ServerName $IP#g" $TEMP
    sudo sed -i "s#DocumentRoot .*#DocumentRoot $DEPLOY_PATH/public#g" $TEMP
    sudo sed -i "s#<Directory .*>#<Directory $DEPLOY_PATH/public>#g" $TEMP
    sudo mv $TEMP $APACHE_PATH/sites-available/mconf-web
    sudo a2ensite mconf-web

    sudo /etc/init.d/apache2 restart
}

apache_check() {
    REPLY=
    APACHE_VERSION=
    APACHE_DAEMON=`which apache2`
    if [ $APACHE_DAEMON ]; then
        APACHE_VERSION=`$APACHE_DAEMON -v 2>&1 | head -1 | sed 's/^.*\/\(.*\) .*$/\1/'`
        REPLY=1
    fi
}

# Echoes the apache version
apache_check_version() {
    apache_check
    echo "Apache:"
    echo "  version: $APACHE_VERSION"
    echo "  at: $APACHE_DAEMON"
}

# Installs apache using passenger
apache_install() {
    echo "-- Installing Apache2 and other dependencies"
    dependencies_include_package_list
    install_dependencies "${PACKAGES_APACHE[*]}"

    echo "-- Installing Passenger and its module for Apache"
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    gem install passenger --no-ri --no-rdoc -v $GEM_VERSION_PASSENGER
    rvmsudo passenger-install-apache2-module -a

    echo "-- Configuring Apache to enable Passenger and Mconf-Web"

    # enable the rewrite module and passenger
    sudo ln -f -s $APACHE_PATH/mods-available/rewrite.load $APACHE_PATH/mods-enabled/rewrite.load &>/dev/null
    rvmsudo passenger-install-apache2-module --snippet | sudo tee $APACHE_PATH/conf.d/mconf-passenger &>/dev/null
    sudo rm $APACHE_PATH/sites-enabled/*

    # configures and creates the mconf-web virtual host
    TEMP=`mktemp`
    curl https://raw.github.com/mconf/mconf-web/latest/config/apache2.conf.example -o $TEMP
    sudo sed -i "s#ServerName .*#ServerName $IP#g" $TEMP
    sudo sed -i "s#DocumentRoot .*#DocumentRoot $DEPLOY_PATH/public#g" $TEMP
    sudo sed -i "s#<Directory .*>#<Directory $DEPLOY_PATH/public>#g" $TEMP
    sudo mv $TEMP $APACHE_PATH/sites-available/mconf-web
    sudo ln -f -s $APACHE_PATH/sites-available/mconf-web $APACHE_PATH/sites-enabled/mconf-web &>/dev/null

    sudo /etc/init.d/apache2 restart
}

# restart the web server
restart_web_server() {
    apache_check
    if [ $REPLY ]; then
        echo "-- Restarting Apache"
        sudo /etc/init.d/apache2 restart
    else
        echo "-- Restarting Nginx"
        sudo /etc/init.d/nginx restart
    fi
}

# restart all services needed by mconf-web
restart_mconf_web() {
    restart_web_server

    echo "-- Restarting God"
    sudo /etc/init.d/god stop
    sudo /etc/init.d/god start
}

# Update the dependencies: gems and git submodules
deploy_update_dependencies() {
    cd $DEPLOY_PATH
    gem install bundler --no-ri --no-rdoc -v $GEM_VERSION_BUNDLER
    bundle install --without=development test
    git submodule init
    git submodule update
}

# Returns in $REPLY the latest tag created = the latest version
get_version_to_be_installed() {
    if [ $DEPLOY_VERSION ]; then
        REPLY=$DEPLOY_VERSION
    else
        # ls-remote anwsers with lines such as:
        # 901dfadd9951371e40f7696a7ddc7fd1395e8741       refs/tags/v0.3^{}
        REPLY=`git ls-remote --tags ${DEPLOY_REPO} v\*^{} | tail -1 | sed 's:.*refs/tags/\(.*\)^{}:\1:'`
    fi
}




#
# Figure out our environment
#

# Check the current platform
# We only support Ubuntu for now
# About linux distros: http://linuxmafia.com/faq/Admin/release-files.html

PLATFORM=""
if [ "`uname`" = "Linux" ]; then
    if [ -f /etc/lsb-release ]; then
        if grep -q Ubuntu /etc/lsb-release; then
            PLATFORM=ubuntu
        fi
    fi

    if [ $PLATFORM != ubuntu ]; then
        CUR_PLATFORM=`ls /etc/*-release | xargs grep DISTRIB_ID | sed 's/DISTRIB_ID=//g'`
        print_error_banner "Sorry, but this script cannot be run in your platform: $CUR_PLATFORM"
        exit 1
    fi
else
    print_error_banner "Are you not on linux? Sorry, but this script cannot be run in your platform."
    exit 1
fi


#
# Parse the parameters
#

while [ $# -gt 0 ]; do

    if [ "$1" = "--version" -o "$1" = "-version" -o "$1" = "-v" ]; then
        VERSION=1
        shift
        continue
    fi

    if [ "$1" = "--help" -o "$1" = "-help" -o "$1" = "-h" ]; then
        usage
        exit 0
    fi

    if [ "$1" = "--install-ruby" -o "$1" = "-install-ruby" ]; then
        echo "- Request to install RVM/Ruby"
        RUBY=1
        shift
        continue
    fi

    if [ "$1" = "--install-packages" -o "$1" = "-install-packages" ]; then
        echo "- Request to install system packages dependencies for Mconf-Web"
        DEPENDENCIES=1
        shift
        continue
    fi

    if [ "$1" = "--checkout" -o "$1" = "-checkout" ]; then
        echo "- Getting the application code"
        CHECKOUT=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-setup" -o "$1" = "-deploy-setup" ]; then
        echo "- Preparing the production environment and deploying"
        DEPLOY_SETUP=1
        shift
        continue
    fi

    if [ "$1" = "--restart" -o "$1" = "-restart" ]; then
        echo "- Request to restart the deployed application"
        DEPLOY_RESTART=1
        shift
        continue
    fi

    if [ "$1" = "--update" -o "$1" = "-update" ]; then
        echo "- Request to update the deployed application"
        DEPLOY_UPDATE=1
        shift
        continue
    fi

    echo
    echo "--------------------------------------------------------------------------------"
    echo "  Unknown command ${1}"
    echo "  Aborting."
    echo "--------------------------------------------------------------------------------"
    echo

    usage
    exit 1
done


#
# Version
#

# Check if the there's an mconf-web application deployed
# Sets $REPLY with the version taken from the repo if the above is true
get_application_version() {
    if [ -d $DEPLOY_PATH ]; then
        REPLY=
        if [ -f $DEPLOY_PATH/lib/version.rb ]; then
            if cat $DEPLOY_PATH/lib/version.rb | grep -q "module Vcc"; then
                REPLY=`cat $DEPLOY_PATH/lib/version.rb | grep "VERSION" | sed 's/[^"]*"\([^"]*\)".*/\1/g'`
            fi
        fi
    fi
}

if [ $VERSION ]; then
    echo
    echo "Script version: $SCRIPT_VERSION"
    get_application_version
    if [ $REPLY ]; then
        echo "Found an application at ${DEPLOY_PATH} with version: $REPLY"
    fi
    echo
    exit 0
fi


#
# Install system packages
#

# Includes a file with the list of dependencies for mconf-web
# This file is in the source code dir, at config/packages.<platformname>
dependencies_include_package_list() {
    # get the dependencies from github
    install_dependency curl
    TEMP=`mktemp`
    sudo curl https://raw.github.com/mconf/mconf-web/latest/config/packages.ubuntu -o $TEMP
    source $TEMP
}

if [ $DEPENDENCIES ]; then
    check_root

    dependencies_include_package_list

    echo "-- Installing dependencies for a production environment"
    sudo apt-get update
    install_dependencies "${PACKAGES_PRODUCTION[*]}"

    print_banner "Dependencies installation finished."
fi


#
# Install Ruby
#

if [ $RUBY ]; then
    check_root

    # installs RVM if not present
    rvm_check
    if [ $REPLY ]; then
        REPLY=n
        echo
        echo "RVM found at $(which rvm)"
        echo "Do you want to proceed anyway?"
        read -p "(y/N)? "

        if [[ $REPLY == [yY] ]]; then
            echo "-- Installing RVM..."
            rvm_install
        fi

        print_banner "RVM/Ruby installation finished."
    else
        echo "-- Installing RVM..."
        rvm_install
        rvm_check

        if [ $REPLY ]; then
            print_banner "RVM/Ruby installation finished."
        fi
    fi
fi


#
# Get the application and install its dependencies (gems)
#

# Checkout the application using git
deploy_checkout() {
    install_dependency git-core

    echo "-- Creating the deploy directory: $DEPLOY_PATH"
    mkdir -p $DEPLOY_PATH

    echo "-- Cloning Mconf-Web"
    git clone $DEPLOY_REPO $DEPLOY_PATH

    cd $DEPLOY_PATH
    get_version_to_be_installed
    echo "-- Checking out branch $REPLY"
    git checkout $REPLY
    git pull origin $REPLY &>/dev/null # just in case a branch needs to be updated
}

if [ $CHECKOUT ]; then
    check_root

    require_rvm

    echo "-- Downloading the application"
    deploy_checkout

    echo "-- Installing the required gems"
    deploy_update_dependencies

    print_banner "Checked out the application at ${DEPLOY_PATH}."
fi



#
# Web server, setup god, and deploy for the first time
# This will erase the entire database and use data from setup_conf.yml to
# recreate it.
#

# Installs the webserver choosen by the user
deploy_install_web_server() {
    # Nginx
    if [[ $REPLY == [2] ]]; then
        nginx_check
        if [ $REPLY ]; then
            echo
            echo "--------------------------------------------------------------------------------"
            echo "You appear to have nginx already installed at $NGINX_DAEMON"
            echo "Do you want to install it anyway?"
            echo "Choose no to keep the current version (you will have to configure it manually)"
            echo "If you need more information see:"
            echo "  http://code.google.com/p/mconf/wiki/MconfWebDeployInBBBMachine"
            echo "--------------------------------------------------------------------------------"
            read -p "(y/N)? "
            echo
            if [[ $REPLY == [yY] ]]; then
                echo "-- Installing nginx"
                nginx_install
            else
                echo "-- Using the nginx already installed:"
                nginx_check_version
                echo
                echo "For help on how to configure it, see:"
                echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual"
                echo
                # TODO: ask if the user wants to proceed. files can be overwritten
                exit 0
            fi
        else
            echo
            echo "-- Installing nginx"
            nginx_install
        fi

    # Apache
    elif [[ $REPLY == [1] ]]; then
        apache_check
        if [ $REPLY ]; then
            echo
            echo "--------------------------------------------------------------------------------"
            echo "You appear to have Apache already installed at $APACHE_DAEMON"
            echo "Do you want to install it anyway?"
            echo "Choose no to keep the current version (you will have to configure it manually)"
            echo "--------------------------------------------------------------------------------"
            read -p "(y/N)? "
            echo
            if [[ $REPLY == [yY] ]]; then
                echo "-- Installing Apache"
                apache_install
            else
                echo "-- Using the Apache already installed:"
                apache_check_version
                echo
                echo "For help on how to configure it, see:"
                echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual"
                echo
                # TODO: ask if the user wants to proceed. files can be overwritten
                exit 0
            fi
        else
            echo
            echo "-- Installing Apache"
            apache_install
        fi

    else
        echo
        echo "-- No web server will be installed."
        echo
        echo "For help on how to setup a web server, see:"
        echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual"
        echo
    fi
}

# Prompts the user to select a webserver to be installed
deploy_select_web_server() {
    is_bigbluebutton_installed
    if [ $REPLY ]; then
        echo
        echo "--------------------------------------------------------------------------------"
        echo "You appear to have BigBlueButton installed on this machine and it already"
        echo "comes with Nginx installed. Please choose one of the options below:"
        echo "  (1) Automatically install Apache for Mconf-Web. BigBlueButton will use the"
        echo "      already existent and configured Nginx. (recommended)"
        echo "  (2) Manually configure Nginx to run Mconf-Web and BigBlueButton. We will"
        echo "      point you to a wiki page showing how to do that."
        echo "--------------------------------------------------------------------------------"
        echo "For more about Mconf-Web and BigBlueButton in the same machine see:"
        echo "   http://code.google.com/p/mconf/wiki/MconfWebDeployInBBBMachine"
        echo "--------------------------------------------------------------------------------"
        REPLY=
        while [ ! $REPLY ]; do
            read -p "(1) APACHE, (2) Manual Nginx, (3) Don't install a web server ? "
            if [[ $REPLY != [123] ]]; then
                REPLY=
            fi
        done
        if [[ $REPLY == [1] ]]; then
            echo
            echo "--------------------------------------------------------------------------------"
            echo "  Setting BigBlueButton port to $BIGBLUEBUTTON_ALT_PORT."
            echo "  You can change it later using \"bbb-conf --setip\""
            echo "--------------------------------------------------------------------------------"
            echo
            sudo rm /etc/nginx/sites-enabled/default           # Disable the default server using the port 80 in nginx
            sudo bbb-conf --setip $IP:$BIGBLUEBUTTON_ALT_PORT  # Changing the BBB port
        elif [[ $REPLY == [2] ]]; then
            echo
            echo "You have chosen to use Mconf-Web with Nginx."
            echo
            echo "For help on how to setup the web server, see:"
            echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentWithBigBlueButtonAndNginx"
            echo
            exit 1
        fi

    else
        echo
        echo "--------------------------------------------------------------------------------"
        echo "You can run Mconf-Web either on Apache or Nginx (default: Apache)."
        echo "Select one option below:"
        echo "--------------------------------------------------------------------------------"
        REPLY=
        while [ ! $REPLY ]; do
            read -p "(1) APACHE, (2) Nginx, (3) Don't install a web server ? "
            if [[ $REPLY != [123] ]]; then
                REPLY=
            fi
        done
    fi
}

deploy_configure_god() {
    sudo mkdir -p /etc/god/conf.d/

    # installing god
    gem install god --no-ri --no-rdoc -v $GEM_VERSION_GOD

    # global config file = loads all files in /etc/god/conf.d/
    sudo curl https://raw.github.com/mconf/mconf-web/latest/config/god/config -o /etc/god/config

    # delayed_job config
    sudo curl https://raw.github.com/mconf/mconf-web/latest/config/god/delayed_job.god -o /etc/god/conf.d/delayed_job.god
    sudo sed -i "s:^RAILS_ROOT =.*:RAILS_ROOT = \"${DEPLOY_PATH}\":g" /etc/god/conf.d/delayed_job.god

    # install and edit the init.d/god file
    # reference: http://openmonkey.com/2008/05/27/god-init-script-for-debian-ubuntu-systems
    sudo curl https://raw.github.com/mconf/mconf-web/latest/config/god/init_script -o /etc/init.d/god
    sudo sed -i "s:^GOD_LOG=.*:GOD_LOG=${DEPLOY_PATH}:g" /etc/init.d/god
    sudo chmod a+x /etc/init.d/god
    sudo update-rc.d god defaults

    # we need a rvm wrapper to run god in the correct environment
    # see: http://beginrescueend.com/integration/god/
    rvm wrapper $RVM_RUBY_VERSION@$RVM_GEMSET bootup god

    # start it
    sudo /etc/init.d/god start
}

if [ $DEPLOY_SETUP ]; then
    check_root

    require_rvm

    echo "-- Installing a web server"
    deploy_select_web_server
    deploy_install_web_server

    echo "-- Installing god - process monitoring framework"
    deploy_configure_god

    require_deployed_application

    echo
    echo "WARNING: This operation will erase your entire database!"
    echo "Do you want to proceed anyway?"
    read -p "(y/N)? "

    if [[ $REPLY == [yY] ]]; then
        cd $DEPLOY_PATH
        bundle exec rake setup:db RAILS_ENV=production
        bundle exec rake secret RAILS_ENV=production
    else
        echo
        echo "Aborted. If needed you can run it later with:"
        echo "--------------------------------------------------------------------------------"
        echo " cd $DEPLOY_PATH "
        echo " bundle exec rake setup:db RAILS_ENV=production "
        echo " bundle exec rake secret RAILS_ENV=production "
        echo "--------------------------------------------------------------------------------"
    fi

    restart_mconf_web

    echo
    echo "-- Deployment configuration finished."
    echo "--------------------------------------------------------------------------------"
    echo " You can browse http://${IP} to access the application."
    echo "--------------------------------------------------------------------------------"

    print_banner "Basic setup finished. You should now edit the configuration files."
fi


#
# Restarts the deployed application.
#

if [ $DEPLOY_RESTART ]; then
    check_root

    require_deployed_application

    echo "-- Restarting the deployed application"
    restart_mconf_web

    print_banner "Application restarted."
fi


#
# Updates the deployed application code and runs the migrations.
#

if [ $DEPLOY_UPDATE ]; then
    check_root

    require_deployed_application

    echo "-- Updating the deployed application"

    cd $DEPLOY_PATH
    get_version_to_be_installed

    VERSION=$REPLY
    echo "-- Updating the source code to the version ${VERSION}"
    git checkout $REPLY
    git pull origin $REPLY &>/dev/null # just in case a branch needs to be updated

    echo "-- Installing the required gems"
    deploy_update_dependencies

    echo "-- Updating the database"
    bundle exec rake db:migrate RAILS_ENV=production

    restart_mconf_web

    print_banner "Application now at version/branch: ${VERSION}."
fi
