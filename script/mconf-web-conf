#!/bin/bash
#
# Mconf-Web configuration script.
#
# This file is part of Mconf - http://code.google.com/p/mconf
# This file was based on "bbb-conf" from BigBlueButton (http://www.bigbluebutton.org)
#
# See the change history for this file in our git at:
#  https://github.com/mconf/mconf-web/blob/master/script/mconf-web-conf
#
# TODO:
#   * --check
#   * --setip (?)
#   * ssh keys for production?
#   * Improve the require_* functions
#   * See other TODO: markers in the code
#
# Changelog:
#   2011-09-23 LCD  The deployment now does not use capistrano and so it does not require a
#                   development environment.
#   2011-09-20 LCD  Started removing all development-related tasks, the script will be used
#                   for production only.
#   2011-09-12 LCD  RVM is now installed as multi-user.
#   2011-09-07 LCD  Started a cleanup in the script. It will be used for production only.
#   2011-07-05 LCD  Inital Version

#
# Environment variables
#

IP=$(ifconfig | grep -v '127.0.0.1' | grep -E "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | head -1 | cut -d: -f2 | awk '{print $1}') # local IP got from ifconfig

MCONF_WEB_CONF_VERSION="0.2"                            # The version of this script

RVM_VERSION=1.8.0                                       # to fix the RVM version to be installed
RVM_RUBY_VERSION=1.9.2                                  # Ruby version
RVM_GEMSET=mconf                                        # gemset for production (also defined in mconf-web/config/deploy.rb)

DEPLOY_PATH=~/mconf-web                                 # directory for the deployed application
DEPLOY_REPO=git://github.com/mconf/mconf-web.git        # used to checkout the production environment
DEPLOY_BRANCH=stable                                    # branch to be be deployed # TODO: change to v0.4

NGINX_VERSION=1.0.0                                     # default version for Nginx (used by Passenger)
NGINX_DAEMON=/opt/nginx/sbin/nginx                      # default path for the nginx daemon (used by Passenger)
APACHE_VERSION=2.2.14                                   # default version for Apache
APACHE_DAEMON=/usr/sbin/apache2                         # default path for the apache2 daemon
APACHE_PATH=/etc/apache2                                # default path for Apache

GEM_BUNDLER_VERSION=1.0.15                              # bundler version
GEM_VERSION_PASSENGER=3.0.7                             # passenger version

SETUP_VM_SRC_PATH=~/dev/source/mconf-web                # local directory where the dev environment will be placed
SETUP_VM_IP=$IP                                         # default IP/domain for BigBlueButton if not informed in --setup-vm
SETUP_VM_PORT=8888                                      # default port for BigBlueButton if not informed in --setup-vm

BIGBLUEBUTTON_ALT_PORT=8888                             # alternative port for BigBlueButton if necessary


#
# Usage and first check for parameters
#

usage() {
    echo "Mconf-Web Configuration Utility - Version $MCONF_WEB_CONF_VERSION"
    echo "http://code.google.com/p/mconf"
    echo
    echo "   mconf-web-conf [commands] [options]"
    echo
    echo "Commands:"

    echo "  General:"
    echo "    --help, -h                       Shows this help"
    echo "    --version, -v                    Display version"
    echo
    echo "    --install-packages               Install dependencies to run Mconf-Web"
    echo "    --install-ruby                   Install ruby (using RVM)"
    echo "    --deploy-setup                   Basic tasks before the application can be deployed"
    echo "    --deploy-configure               Configures the application using the data on setup_conf.yml"
    echo "                                     IMPORTANT: this will erase you database!"
    echo "    --deploy-restart                 Restarts the deployed app (executes cap deploy:restart)"
    echo "    --deploy-update                  Updates the deployed app code and runs the migrations (executes cap deploy:migrations)"
    echo "  Mconf VM:"
    echo "    --setup-vm [PORT]                Setup Mconf-Web in the Mconf VM. [PORT] is the port being used for BigBlueButton."
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi



#
# Helper functions
#

check_root() {
    if [ $EUID == 0 ]; then
        echo "This operation should not be run as root."
        echo
        echo "If this operation needs to execute an operation as root, you'll be asked for"
        echo "your password to execute the operation using sudo."
        exit 1
    fi
}

is_package_installed() {
    REPLY=
    if [[ "`dpkg-query -W -f='${Status}\n' $1 | cut -d" " -f3`" == "installed" ]]; then
        REPLY=1
    fi
}

# Is this the BigBlueButton VM?
is_bigbluebutton_vm() {
    if [ -f /home/firstuser/.profile ]; then
        echo $(cat /home/firstuser/.profile | grep BigBlueButton)
    fi
}

is_bigbluebutton_installed() {
    # This is how bbb-conf checks for BigBlueButton. But we also check for the package "bigbluebutton".
    BBB_CONFIG=/usr/share/red5/webapps/bigbluebutton/WEB-INF/red5-web.xml
    is_package_installed bigbluebutton
    if [ $REPLY ] && [ -f $BBB_CONFIG ]; then
        REPLY=1
    else
        REPLY=
    fi
}

# Install a package in the system
# $1 is the package and binary name
install_dependency() {
    is_package_installed $1
    if [ $REPLY ]; then
        echo "-- Dependency '$1' already installed"
    else
        echo "-- Installing dependency: $1"
        sudo apt-get install $1 -y --force-yes
    fi
}

# Install a list of packages in the system
# $1 is the list of packages
install_dependencies() {
    echo "-- Installing dependencies: $1"
    sudo apt-get install $1 -y --force-yes
}

# Prints a nice "banner" in the console with the text in
# $1 in the center
print_banner() {
    echo
    echo "-- $1"
    echo
}

# Prints a nice error "banner" in the console with the text in
# $1 in the center
print_error_banner() {
    echo
    echo "### ERROR: $1"
    echo
}

# Utility function to make a copy of the conf file
# $1 is the file
config_check_and_backup () {
    # can we write to the configuration file?
    if [ ! -w $1 ]; then
        echo "Cannot write to $1!"
        exit 1
    fi

    # let's see if we need a copy
    cp $1 $1.bak
    echo "-- Created the backup file at $1.bak"
}

# 3 parameters: the file, the variable name, the new value
config_yml_get_value_from_user() {
    echo -n "- "
    grep "^[[:blank:]]*\(${2}\):.*" $1 -m 1 | sed "s/[[:space:]]*\(.*\)\(#.*\)$/Parameter \"${2}\": \2/" | sed "s/#[[:space:]]*//"
    echo -n "  Current value: "
    grep "^[[:blank:]]*\(${2}\):.*" $1 -m 1 | sed "s/[[:space:]]*${2}:[[:space:]]*\(.*\)\(#.*\)$/\1/"

    echo -n "  Enter a new value [leave blank to skip]: "

    # get the new value from the user
    read -r USER_INPUT
    if [ $USER_INPUT ]; then
        # anything between "parameter:" and end-of-line or '#' will be replaced by the user input
        echo "  New value: \"${USER_INPUT}\""
        USER_INPUT=${USER_INPUT//\//\\/} # escape all slashes
        sed -i "s/\(^[[:space:]]*${2}:\)[^#$]*\(.*\)$/\1 \"${USER_INPUT}\" \2/g" $1
    fi
}

# Configures the file $1 (a yml file)
# Ask the user for values to the parameters in the array $2
config_yml_file() {
    config_check_and_backup $1
    echo

    if [ ! -f $1 ]; then
        print_error_banner "The configuration file $1 doesn't exists. Please, run this script with the option --setup-dev."
        exit 1
    fi
    FILENAME=$1

    while [ $2 ]; do
        config_yml_get_value_from_user $FILENAME $2
        echo
        shift
    done
}

# Echoes the parameters $2 from the file $1
echo_yml_file() {
    if [ ! -f $1 ]; then
        print_error_banner "The configuration file $1 doesn't exists. Please, run this script with the option --setup-dev."
        exit 1
    fi
    FILENAME=$1

    echo "File ${FILENAME}"
    while [ $2 ]; do
        grep "^[[:blank:]]*\(${2}\):.*" $FILENAME -m 1 | sed "s/[[:space:]]*\(.*\)\(#.*\)$/\1/"
        shift
    done
}

# Calls config_yml_file until the user is satisfied
# The list of parameters should be at PARAMS
config_yml_file_with_review() {
    REPLY=y
    while [[ $REPLY == [yY] ]]; do
        config_yml_file $1 ${PARAMS[*]}
        read -p "Press enter to review the configurations..."
        echo "--------------------------------------------------------------------------------"
        echo_yml_file $1 ${PARAMS[*]}
        echo "--------------------------------------------------------------------------------"
        read -p "Do you need to edit these configurations again? (y/N)"
    done
}

# Check if rvm is installed
rvm_check() {
    echo "-- Checking if RVM is installed"

    REPLY=
    #which rvm >/dev/null
    #if [ $? = 0 ]; then
    if [ -f /usr/local/rvm/bin/rvm ]; then
        REPLY=1
    else
        echo "-- RVM not found!"
    fi
}

# Exits if RVM is not installed
# Ensures --install-ruby was called
require_rvm() {
    rvm_check
    if [ ! $REPLY ]; then
        print_error_banner "You need RVM installed to run this command. Please run this script with the option --install-ruby."
        exit 1
    fi
}

# Installs the base of RVM
rvm_install() {
    install_dependency curl
    install_dependency git-core

    echo "-- Downloading and installing RVM version $RVM_VERSION"
    curl -s https://rvm.beginrescueend.com/install/rvm -o rvm-installer
    chmod +x rvm-installer
    sudo ./rvm-installer --version $RVM_VERSION
    rm ./rvm-installer
    sudo adduser `whoami` rvm

    echo "-- Installing Ruby dependencies given by rvm notes"
    # Uses the section "For Ruby (MRI & ree)  you should install the following OS dependencies"
    RVM_PACKAGES=`sudo /usr/local/rvm/bin/rvm notes | grep "^\s*ruby:.*install" | head -1 | sed 's/.* install //g'`
    install_dependencies "$RVM_PACKAGES"

    echo "-- Installing Ruby #{RVM_RUBY_VERSION} and configuring"
    RVM=/usr/local/rvm/bin/rvm
    sudo $RVM pkg install openssl
    if sudo $RVM list | grep -q $RVM_RUBY_VERSION; then
        sudo $RVM remove $RVM_RUBY_VERSION
    fi
    sudo $RVM install $RVM_RUBY_VERSION -C --with-openssl-dir=$HOME/.rvm/usr
    sudo $RVM use $RVM_RUBY_VERSION@$RVM_GEMSET --create --default
}

# Checks if there's already an application deployed
# Sets $REPLY if true
deployed_application_check() {
    REPLY=
    if [ -d $PRODUCTION_PATH ]; then
        REPLY=1
    fi
    # TODO: also check if the app is configured (check config/setup_conf.yml possibly)
}

# Exits if the production environment doesn't exists
# Ensures --setup-prod was called
require_prod_environment() {
    require_rvm

    rvm use $RVM_RUBY_VERSION
    rvm gemset list | grep -q mconf_production
    if [ $? == 0 ]; then
        rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
        gem list | grep -q passenger
        if [ $? != 0 ]; then
            print_error_banner "You need to setup the production environment to run this command. Please run this script with the option --setup-prod."
            exit 1
        fi
    else
        print_error_banner "You need to setup the production environment to run this command. Please run this script with the option --setup-prod."
        exit 1
    fi
}

# Exits if the application was not deployed yet
# Ensures --deploy-first-time was called
require_deployed_application() {
    deployed_application_check
    if [ ! $REPLY ]; then
        print_error_banner "You need to deploy the application first. Please, run this script with the option --deploy-first-time."
        exit 1
    fi
}

# Install the gem $1
gem_install()
{
    if [[ $# -ge 2 ]]; then
        GEM_VERSION="-v ${2}"
    fi
    gem install $1 --no-ri --no-rdoc $GEM_VERSION
    GEM_VERSION=
}

# sets $REPLY if nginx is found in the system
nginx_check() {
    REPLY=

    # if nginx is installed with dpkg (BigBlueButton uses it)
    if dpkg-query -s nginx 1>/dev/null; then
        REPLY=1
        NGINX_DAEMON=`which nginx`
        NGINX_VERSION=`dpkg-query -W -f='${Version}\n' nginx | sed 's/\(^[[:digit:]\.]*\).*/\1/'`

    # tests for the default nginx installed by passenger
    else
        if test -x $NGINX_DAEMON; then
            REPLY=1
            NGINX_VERSION=`$NGINX_DAEMON -v 2>&1 | sed 's/^.*\/\(.*\)$/\1/'`
        fi
    fi
}

# Echoes the nginx version
nginx_check_version() {
    nginx_check
    echo "Nginx:"
    echo "  version: $NGINX_VERSION"
    echo "  at: $NGINX_DAEMON"
}

# Installs nginx using passenger
nginx_install() {
    rvm use $RVM_RUBY_VERSION@$RVM_GEMSET
    rvmsudo passenger-install-apache2-module -a

    echo "-- Configuring Apache to enable Passenger and Mconf-Web"

    # enable the rewrite module and passenger
    sudo ln -f -s $APACHE_PATH/mods-available/rewrite.load $APACHE_PATH/mods-enabled/rewrite.load &>/dev/null
    rvmsudo passenger-install-apache2-module --snippet | sudo tee $APACHE_PATH/conf.d/mconf-passenger &>/dev/null
    sudo rm $APACHE_PATH/sites-enabled/*

    # configures and creates the mconf-web virtual host
    TEMP=`mktemp`
    curl https://raw.github.com/mconf/mconf-web/master/config/apache2.conf.example -o $TEMP
    sudo sed -i "s#ServerName .*#ServerName $IP#g" $TEMP
    sudo sed -i "s#DocumentRoot .*#DocumentRoot $DEPLOY_PATH/public#g" $TEMP
    sudo sed -i "s#<Directory .*>#<Directory $DEPLOY_PATH/public>#g" $TEMP
    sudo mv $TEMP $APACHE_PATH/sites-available/mconf-web
    sudo ln -f -s $APACHE_PATH/sites-available/mconf-web $APACHE_PATH/sites-enabled/mconf-web &>/dev/null

    sudo /etc/init.d/apache2 restart
}

apache_check() {
    REPLY=
    APACHE_VERSION=
    APACHE_DAEMON=`which apache2`
    if [ $APACHE_DAEMON ]; then
        APACHE_VERSION=`$APACHE_DAEMON -v 2>&1 | head -1 | sed 's/^.*\/\(.*\) .*$/\1/'`
        REPLY=1
    fi
}

# Echoes the apache version
apache_check_version() {
    apache_check
    echo "Apache:"
    echo "  version: $APACHE_VERSION"
    echo "  at: $APACHE_DAEMON"
}

# Installs apache using passenger
apache_install() {
    echo "-- Installing Apache2 and other dependencies"
    # system package dependencies
    dependencies_include_package_list
    install_dependencies "${PACKAGES_APACHE[*]}"

    # echo "-- Installing the Passenger module for Apache"
    rvm_source_it
    rvm use $RVM_RUBY_VERSION@$RVM_PRODUCTION_GEMSET
    rvmsudo passenger-install-apache2-module -a

    echo "-- Configuring Apache to enable Passenger and Mconf-Web"

    # enable the rewrite module and passenger
    sudo ln -f -s $APACHE_PATH/mods-available/rewrite.load $APACHE_PATH/mods-enabled/rewrite.load &>/dev/null
    rvmsudo passenger-install-apache2-module --snippet | sudo tee $APACHE_PATH/conf.d/mconf-passenger &>/dev/null
    sudo rm $APACHE_PATH/sites-enabled/*

    # configures and creates the mconf-web virtual host
    TEMP=`mktemp`
    curl https://raw.github.com/mconf/mconf-web/master/config/apache2.conf.example -o $TEMP
    sudo sed -i "s#ServerName .*#ServerName $IP#g" $TEMP
    sudo sed -i "s#DocumentRoot .*#DocumentRoot $DEPLOY_PATH/public#g" $TEMP
    sudo sed -i "s#<Directory .*>#<Directory $DEPLOY_PATH/public>#g" $TEMP
    sudo mv $TEMP $APACHE_PATH/sites-available/mconf-web
    sudo ln -f -s $APACHE_PATH/sites-available/mconf-web $APACHE_PATH/sites-enabled/mconf-web &>/dev/null

    sudo /etc/init.d/apache2 restart
}

#
# Figure out our environment
#

# Check the current platform
# We only support Ubuntu for now
# About linux distros: http://linuxmafia.com/faq/Admin/release-files.html

PLATFORM=""
if [ "`uname`" = "Linux" ]; then
    if [ -f /etc/lsb-release ]; then
        if grep -q Ubuntu /etc/lsb-release; then
            PLATFORM=ubuntu
        fi
    fi

    if [ $PLATFORM != ubuntu ]; then
        CUR_PLATFORM=`ls /etc/*-release | xargs grep DISTRIB_ID | sed 's/DISTRIB_ID=//g'`
        print_error_banner "Sorry, but this script cannot be run in your platform: $CUR_PLATFORM"
        exit 1
    fi
else
    print_error_banner "Are you not on linux? Sorry, but this script cannot be run in your platform."
    exit 1
fi


#
# Parse the parameters
#

while [ $# -gt 0 ]; do

    if [ "$1" = "--version" -o "$1" = "-version" -o "$1" = "-v" ]; then
        VERSION=1
        shift
        continue
    fi

    if [ "$1" = "--help" -o "$1" = "-help" -o "$1" = "-h" ]; then
        usage
        exit 0
    fi

    if [ "$1" = "--install-ruby" -o "$1" = "-install-ruby" ]; then
        echo "- Request to install RVM/Ruby"
        RUBY=1
        shift
        continue
    fi

    if [ "$1" = "--install-packages" -o "$1" = "-install-packages" ]; then
        echo "- Request to install system packages dependencies for Mconf-Web"
        DEPENDENCIES=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-setup" -o "$1" = "-deploy-setup" ]; then
        echo "- Deploying the application"
        DEPLOY_SETUP=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-configure" -o "$1" = "-deploy-configure" ]; then
        echo "- Deploying the application"
        DEPLOY_CONFIGURE=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-restart" -o "$1" = "-deploy-restart" ]; then
        echo "- Request to restart the deployed application"
        DEPLOY_RESTART=1
        shift
        continue
    fi

    if [ "$1" = "--deploy-update" -o "$1" = "-deploy-update" ]; then
        echo "- Request to update the deployed application"
        DEPLOY_UPDATE=1
        shift
        continue
    fi

    if [ "$1" = "--setup-vm" -o "$1" = "-config-vm" ]; then
        echo "- Setup Mconf-Web in the Mconf VM"
        SETUP_VM=1
        shift
        if [[ $# -ge 1 && ! "$1" =~ ^-.* ]]; then
            SETUP_VM_IP="${1}"
            shift
        fi
        if [[ $# -ge 1 && ! "$1" =~ ^-.* ]]; then
            SETUP_VM_PORT="${1}"
            shift
        fi
        continue
    fi

    echo
    echo "--------------------------------------------------------------------------------"
    echo "  Unknown command ${1}"
    echo "  Aborting."
    echo "--------------------------------------------------------------------------------"
    echo

    usage
    exit 1
done


#
# Version
#

# Check if the there's an mconf-web application deployed
# Sets $REPLY with the version taken from the repo if the above is true
get_application_version() {
    if [ -d $DEPLOY_PATH ]; then
        REPLY=
        if [ -f $DEPLOY_PATH/lib/version.rb ]; then
            if cat $DEPLOY_PATH/lib/version.rb | grep -q "module Vcc"; then
                REPLY=`cat $DEPLOY_PATH/lib/version.rb | grep "VERSION" | sed 's/[^"]*"\([^"]*\)".*/\1/g'`
            fi
        fi
    fi
}

if [ $VERSION ]; then
    echo
    echo "Script version: $MCONF_WEB_CONF_VERSION"
    get_application_version
    if [ $REPLY ]; then
        echo "Found an application at ${DEPLOY_PATH} with version: $REPLY"
    fi
    echo
    exit 0
fi


#
# Install Ruby
#

if [ $RUBY ]; then
    check_root

    # installs RVM if not present (https://rvm.beginrescueend.com/rvm/install/)
    rvm_check
    if [ $REPLY ]; then
        echo "-- RVM already installed at $(which rvm)"
    else
        echo "-- Installing RVM..."
        rvm_install
    fi

    rvm_check
    if [ $REPLY ]; then
        print_banner "RVM/Ruby installation finished."
    else
        print_error_banner "Something went wrong installing ruby. Check the messages above and try again."
        exit 1
    fi
fi


#
# Mconf-Web system packages
#

# Includes a file with the list of dependencies for mconf-web
# This file is in the source code dir, at config/packages.<platformname>
dependencies_include_package_list() {
    # get the dependencies from github
    install_dependency curl
    TEMP=`mktemp`
    sudo curl https://raw.github.com/mconf/mconf-web/master/config/packages.ubuntu -o $TEMP
    source $TEMP
}

if [ $DEPENDENCIES ]; then
    check_root

    dependencies_include_package_list

    echo "-- Installing dependencies for a production environment"
    install_dependencies "${PACKAGES_PRODUCTION[*]}"

    print_banner "Dependencies installation finished."
fi



#
# Setup the production environment
#

deploy_install_web_server() {
    # Nginx
    if [[ $REPLY == [2] ]]; then
        nginx_check
        if [ $REPLY ]; then
            echo
            echo "--------------------------------------------------------------------------------"
            echo "You appear to have nginx already installed at $NGINX_DAEMON"
            echo "Do you want to install it anyway?"
            echo "Choose no to keep the current version (you will have to configure it manually)"
            echo "If you need more information see:"
            echo "  http://code.google.com/p/mconf/wiki/MconfWebDeployInBBBMachine"
            echo "--------------------------------------------------------------------------------"
            read -p "(y/N)? "
            echo
            if [[ $REPLY == [yY] ]]; then
                echo "-- Installing nginx"
                nginx_install
            else
                echo "-- Using the nginx already installed:"
                nginx_check_version
                echo
                echo "For help on how to configure it, see:"
                echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual"
                echo
                exit 0
            fi
        else
            echo
            echo "-- Installing nginx"
            nginx_install
        fi

    # Apache
    elif [[ $REPLY == [1] ]]; then
        apache_check
        if [ $REPLY ]; then
            echo
            echo "--------------------------------------------------------------------------------"
            echo "You appear to have Apache already installed at $APACHE_DAEMON"
            echo "Do you want to install it anyway?"
            echo "Choose no to keep the current version (you will have to configure it manually)"
            echo "--------------------------------------------------------------------------------"
            read -p "(y/N)? "
            echo
            if [[ $REPLY == [yY] ]]; then
                echo "-- Installing Apache"
                apache_install
            else
                echo "-- Using the Apache already installed:"
                apache_check_version
                echo
                echo "For help on how to configure it, see:"
                echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual"
                echo
                exit 0
            fi
        else
            echo
            echo "-- Installing Apache"
            apache_install
        fi

    else
        echo
        echo "-- No web server will be installed."
        echo
        echo "For help on how to setup a web server, see:"
        echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual"
        echo
    fi
}

deploy_select_web_server() {
    is_bigbluebutton_installed
    if [ $REPLY ]; then
        echo
        echo "--------------------------------------------------------------------------------"
        echo "You appear to have BigBlueButton installed on this machine and it already"
        echo "comes with Nginx installed. Please choose one of the options below:"
        echo "  (1) Automatically install Apache for Mconf-Web. BigBlueButton will use the"
        echo "      already existent and configured Nginx. (recommended)"
        echo "  (2) Manually configure Nginx to run Mconf-Web and BigBlueButton. We will"
        echo "      point you to a wiki page showing how to do that."
        echo "--------------------------------------------------------------------------------"
        echo "For more about Mconf-Web and BigBlueButton in the same machine see:"
        echo "   http://code.google.com/p/mconf/wiki/MconfWebDeployInBBBMachine"
        echo "--------------------------------------------------------------------------------"
        REPLY=
        while [ ! $REPLY ]; do
            read -p "(1) APACHE, (2) Manual Nginx, (3) Don't install a web server ? "
            if [[ $REPLY != [123] ]]; then
                REPLY=
            fi
        done
        if [[ $REPLY == [1] ]]; then
            echo
            echo "--------------------------------------------------------------------------------"
            echo "  Setting BigBlueButton port to $BIGBLUEBUTTON_ALT_PORT."
            echo "  You can change it later using \"bbb-conf --setip\""
            echo "--------------------------------------------------------------------------------"
            echo
            sudo rm /etc/nginx/sites-enabled/default           # Disable the default server using the port 80 in nginx
            sudo bbb-conf --setip $IP:$BIGBLUEBUTTON_ALT_PORT  # Changing the BBB port
        elif [[ $REPLY == [2] ]]; then
            echo
            echo "You have chosen to use Mconf-Web with Nginx."
            echo
            echo "For help on how to setup the web server, see:"
            echo "   http://code.google.com/p/mconf/wiki/MconfWebDeploymentWithBigBlueButtonAndNginx"
            echo
            exit 1
        fi

    else
        echo
        echo "--------------------------------------------------------------------------------"
        echo "You can run Mconf-Web either on Apache or Nginx (default: Apache)."
        echo "Select one option below:"
        echo "--------------------------------------------------------------------------------"
        REPLY=
        while [ ! $REPLY ]; do
            read -p "(1) APACHE, (2) Nginx, (3) Don't install a web server ? "
            if [[ $REPLY != [123] ]]; then
                REPLY=
            fi
        done
    fi
}

# Setup the gem environment for production
# Basically creates a gemset and installs some gems
deploy_setup_gems() {
    gem_install bundler $GEM_VERSION_BUNDLER
    gem_install passenger $GEM_VERSION_PASSENGER
}

deploy_checkout() {
    install_dependency git-core

    echo "-- Creating the deploy directory: $DEPLOY_PATH"
    mkdir -p $DEPLOY_PATH

    echo "-- Cloning Mconf-Web"
    git clone $DEPLOY_REPO $DEPLOY_PATH

    cd $DEPLOY_PATH
    echo "-- Checking out branch $DEPLOY_BRANCH"
    git checkout $DEPLOY_BRANCH
}

deploy_install_gems() {
    cd $DEPLOY_PATH
    bundle install --without=development test
    git submodule init
    git submodule update
}

if [ $DEPLOY_SETUP ]; then
    check_root

    require_rvm
    # TODO: stop if deploy already done before

    echo "-- Setting up gemset and gems for production"
    deploy_setup_gems

    echo "-- Installing a web server"
    deploy_select_web_server
    deploy_install_web_server

    echo "-- Downloading the application"
    deploy_checkout

    echo "-- Installing the required gems"
    deploy_install_gems

    print_banner "Basic setup finished. You should now edit the configuration files."
fi


#
# Configures the deployed application.
# This will erase the entire database and use data from setup_conf.yml to
# recreate it.
#

deploy_first_time() {
    cd $DEPLOY_PATH
    bundle exec rake setup:db RAILS_ENV=production
    bundle exec rake secret RAILS_ENV=production
}

restart_web_server() {
    apache_check
    if [ $REPLY ]; then
        echo "-- Restart Apache"
        sudo /etc/init.d/apache2 restart
    else
        echo "-- Restart Nginx"
        sudo /etc/init.d/nginx restart
    fi
}

if [ $DEPLOY_CONFIGURE ]; then
    check_root

    # TODO: require the --deploy-setup
    # TODO: warn the user that the DB will be cleaned up

    deploy_first_time
    restart_web_server
    print_banner "Deployment finished."
fi


#
# Restarts the deployed application.
#

if [ $DEPLOY_RESTART ]; then
    check_root

    require_deployed_application

    echo "-- Restarting the deployed application"
    restart_web_server

    print_banner "Application restarted."
fi


#
# Updates the deployed application code and runs the migrations.
#

if [ $DEPLOY_UPDATE ]; then
    check_root

    require_deployed_application

    echo "-- Updating the deployed application"
    # TODO: update git
    # TODO: migrate db
    restart_web_server

    print_banner "Application udpated."
fi



#
# Setup Mconf-Web in the Mconf VM
#

config_files_setup_vm() {
    # automatically configure some files in mconf-web
    SALT=`bbb-conf --salt | grep "Salt" | sed 's/[[:blank:]]*Salt: //'`
    MCONF_WEB_SETUP_CONF="$SETUP_VM_SRC_PATH/config/setup_conf.yml"
    sed -i "s/\(^[[:space:]]*bbb_server_url:\)[^#$]*\(.*\)$/\1 \"http:\/\/${SETUP_VM_IP}:${SETUP_VM_PORT}\/bigbluebutton\/api\" \2/g" $MCONF_WEB_SETUP_CONF
    sed -i "s/\(^[[:space:]]*bbb_server_salt:\)[^#$]*\(.*\)$/\1 \"${SALT}\" \2/g" $MCONF_WEB_SETUP_CONF
    sed -i "s/\(^[[:space:]]*site_domain:\)[^#$]*\(.*\)$/\1 \"${SETUP_VM_IP}\" \2/g" $MCONF_WEB_SETUP_CONF
    sudo sed -i "s/server_name .*/server_name ${SETUP_VM_IP};/" /etc/nginx/sites-available/mconf-web

    echo
    echo "################################################################################"
    echo "#              ATTENTION: Setting up configuration files.                      #"
    echo "################################################################################"
    echo

    # most of the parameters are already configured for the Mconf VM
    # so we just need to ask a few of them here

    echo "--------------------------------------------------------------------------------"
    echo "GENERAL configurations:"
    echo " - Here you will configure the admin account, a default BBB server and a gmail"
    echo "   account used to send emails."
    echo "--------------------------------------------------------------------------------"
    echo
    PARAMS=( admin_email admin_password \
             sendmail_username sendmail_password)
    config_yml_file_with_review "$SETUP_VM_SRC_PATH/config/setup_conf.yml"

    echo
}

if [ $SETUP_VM ]; then
    check_root

    # TODO
    if [ ! -f $SETUP_VM_SRC_PATH/config/setup_conf.yml -o ! -f $SETUP_VM_SRC_PATH/config/database.yml ]; then
        print_error_banner "You need to setup the development environment to run this command. Please run this script with the option --setup-dev."
        exit 1
    fi

    echo
    echo "################################################################################"
    echo "#                   Setting up Mconf-Web in the Mconf VM                       #"
    echo "################################################################################"
    echo "BigblueButton server at: http://${SETUP_VM_IP}:${SETUP_VM_PORT}/"
    echo

    echo "-- Editing configuration files"
    config_files_setup_vm

    echo "-- Updating the development environment at master branch"
    cd $SETUP_VM_SRC_PATH
    git checkout master
    git pull origin master
    cd ~
    # TODO: setup-dev?

    DEPLOY_FIRST_TIME=1
    # TODO: this is not working anymore... update the VM

    print_banner "Configuration files edition finished."
fi
