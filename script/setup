#!/usr/bin/env ruby

LINUX_PACKAGES = %w( ruby ruby-dev rdoc irb libopenssl-ruby libmysqlclient15-dev librmagick-ruby rake wget make curl )
RUBY_GEMS_VERSION = "1.3.1"
RUBY_GEMS_PACKAGE = "rubygems-#{ RUBY_GEMS_VERSION }.tgz"
RUBY_GEMS_DOWNLOAD = "http://rubyforge.org/frs/download.php/45905/#{ RUBY_GEMS_PACKAGE }"

GEMS = {}
GEMS[:common] = [ "rails -v 2.2.2",
                  "vpim",
                  "ruby-debug",
                  "ruby-openid",
                  "atom-tools",
                  "mislav-will_paginate -s http://gems.github.com/",
                  "atd-calendar_date_select -s http://gems.github.com/",
                  "rcov",
                  "chronic",
                  "hpricot",
                  "feed-normalizer",
                  "rspec-rails",
                  "hoe" ]

GEMS[:production] = [ "mysql" ]

GEMS[:development] = [ "capistrano",
                       "mongrel",
                       "populator",
                       "faker" ]

def install_linux_packages
  if `uname`.chomp == "Linux" && `which aptitude` != ""
    puts "* Install Linux packages"
    system "sudo aptitude install #{ LINUX_PACKAGES.join(" ") }"
  end
end

def install_gems(set)
  puts "Installing #{ set } gems.."
  GEMS[set].each do |gem|
    puts "Installing gem: #{ gem }"
    system "sudo gem install #{ gem }"
  end
end

def install_gem_subsystem
  if `which gem`.chomp == ""
    gem_bin = `which gem1.8`.chomp
    if gem_bin == ""
      puts "Installing Ruby Gems"
      system "cd /tmp && wget #{ RUBY_GEMS_DOWNLOAD }"
      system "cd /tmp && tar zxf #{ RUBY_GEMS_PACKAGE }"
      system "cd /tmp/rubygems-#{ RUBY_GEMS_VERSION } && sudo /usr/bin/ruby setup.rb"
    end
    system "sudo ln -s /usr/bin/gem1.8 /usr/bin/gem"
  end
end

def setup_production
  install_linux_packages
  install_gem_subsystem
  install_gems(:common)
  install_gems(:production)
  `rake setup:production`
end

def setup_development
  install_linux_packages
  install_gem_subsystem
  install_gems(:common)
  install_gems(:development)
  `rake setup:development`
end

def print_banner(env)
  puts
  puts "------------------------------"
  puts "Setting #{ env } environment"
  puts "------------------------------"
  puts
end

if ARGV[0] =~ /production/
  print_banner("PRODUCTION")
  setup_production
else
  print_banner("DEVELOPMENT ")
  setup_development
end
