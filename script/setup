#!/usr/bin/env ruby

LINUX_PACKAGES = {
  :common => %w( ruby-dev rdoc irb libopenssl-ruby wget make curl aspell-es aspell-en libxml2-dev libxslt-dev libmagickcore-dev libmagickwand-dev ),
  :production => %w( awstats logrotate nfs-common ),
  :development => %w( ),
  :mysql  => %w( libmysqlclient15-dev mysql-server ),
  :sqlite => %w( libsqlite3-dev )
}
#RUBY_GEMS_VERSION = "1.5.0"

GEMS = {
  #TODO: get rails version from config/environment.rb
  :common     => [ "rails -v 2.3.4",
                   "rmagick",
                   "rake",
                   "vpim",
                   "ruby-debug",
                   "ruby-openid",
                   "atom-tools",
                   "mislav-will_paginate -s http://gems.github.com/",
                   "rcov",
                   "chronic",
                   "hpricot",
                   "feed-normalizer",
                   "rspec-rails -v 1.3.2",
                   "hoe",
                   "httparty",
                   "pdf-writer",
                   "ci_reporter",
                   "nokogiri -v 1.4.1",
                   "prism",
                   "rubyzip",
                   "garb" ],
  :production  => [ ],
  :development => [ "capistrano",
                    "mongrel",
                    "populator",
                    "ffaker",
                    "thoughtbot-factory_girl -s http://gems.github.com/"
                     ],
  :mysql => [ "mysql" ],
  :sqlite => [ "sqlite3-ruby" ]
}

DATABASES = %w( MySQL SQLite )

def install_linux_packages(set)
  return unless `uname`.chomp == "Linux" && `which aptitude` != ""

  puts "* Install #{ set } Linux packages"
  if LINUX_PACKAGES[set].any?
    system "sudo aptitude install #{ LINUX_PACKAGES[set].join(" ") }"
  end
end

def install_gems(set)
  puts "Installing #{ set } gems.."
  GEMS[set].each do |gem|
    puts "Installing gem: #{ gem }"
    system "gem install #{ gem } --no-ri --no-rdoc"
  end
end

def install_database
  puts "* Checking config/database.yml: "

  db_file = File.dirname(__FILE__) + "/../config/database.yml"

  if File.exist?(db_file)
    puts "file exists. Assuming configurated database."
    return
  end

  db_type = ask_for_db_type
  install_linux_packages(db_type)
  install_gems(db_type)

  `cp #{ db_file }.#{ db_type }.example #{ db_file }` 

  if db_type == :mysql
    puts
    puts "***************************************************************"
    puts
    puts "MySQL support installed."
    puts "Please, configure your MySQL database and run the script again."
    exit(-1)
  end
end

def ask_for_db_type
  puts
  puts "Which database do you want to install?"
  DATABASES.each_with_index do |db, index|
    puts "#{ index + 1 }. #{ db }"
  end

  until ( number = STDIN.gets.chomp ) =~ /[12]/
    puts "Please, choose 1 or 2"
  end 

  DATABASES[ number.to_i - 1].downcase.to_sym
end

def install_mail_conf
  puts "* Checking config/initializers/mail_conf.rb: "

  mail_file = File.dirname(__FILE__) + "/../config/initializers/mail_conf.rb"

  if File.exist?(mail_file)
    puts "file exists. Assuming configurated mail delivery."
    return
  end

  `cp #{ mail_file }.gmail.example #{ mail_file }` 
  puts "Created basic #{ mail_file }, please configure it."
end

def setup_environment(env)
  install_linux_packages(:common)
  install_linux_packages(env)
  install_gems(:common)
  install_gems(env)
  install_database
  install_mail_conf
  system "rake setup:#{ env }"
end

def print_banner(env)
  puts
  puts "------------------------------"
  puts "Setting #{ env } environment"
  puts "------------------------------"
  puts
end

def print_usage
  puts "Usage: setup ENV [OPTIONS]"
  puts "OPTIONS is optional and depends on the ENV selected"
  puts
  puts "ENVIRONMENTS:"
  puts "  production   - Setup production env"
  puts "  development  - Setup development env"
  puts "    OPTIONS:"
  puts "      packages - Install all system packages for development env"
  puts "      gems     - Install all gems for development env"
  puts
end

if ARGV[0] =~ /production/
  print_banner("PRODUCTION")
  setup_environment(:production)
elsif ARGV[0] =~ /development/
  print_banner("DEVELOPMENT")
  
  if ARGV[1] =~ /gems/
    puts "Installing all gems"
    puts
    install_gems(:common)
    install_gems(:development)
    install_gems(:mysql)
    install_gems(:sqlite)
  elsif ARGV[1] =~ /packages/
    puts "Installing all packages"
    puts
    install_linux_packages(:common)
    install_linux_packages(:development)
    install_linux_packages(:mysql)
    install_linux_packages(:sqlite)
  else
    setup_environment(:development)
  end

else
  puts "Wrong arguments."
  print_usage()
end
